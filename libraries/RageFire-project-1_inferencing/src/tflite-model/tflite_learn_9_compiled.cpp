/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.09.2023 07:19:12

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242560;
#else
constexpr int kTensorArenaSize = 241536;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 59807, -54281, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 8.1888530985452235e-05, 9.0809015091508627e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 46,-59,-68,125,-44,-10,-58,56,109,-21,-61,-43,-35,59,-47,53,97,-60,-45,-76,127,80,104,-85,-89,-113,-18,116,11,-81,14,99, 
  /* [1][0][][] */ 56,71,72,-62,-76,72,-7,13,-35,-30,35,103,109,41,35,-3,-37,-1,-56,-89,-76,33,23,105,83,70,-49,-29,93,-99,-127,-33, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0034035141579806805, 0.0037742741405963898, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 151, 245, 256, 33, 56, 254, -445, 120, -383, 567, 236, 202, 270, 247, 148, -123, -339, -811, -350, -95, -103, 136, -197, 262, 265, 196, -45, 1448, -598, -352, 1609, 595, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.4362936023389921e-05, 4.0978873585117981e-05, 4.0015598642639816e-05, 4.2662897612899542e-05, 4.4602944399230182e-05, 3.8342404877766967e-05, 3.8706923078279942e-05, 3.6475612432695925e-05, 3.8724301703041419e-05, 4.5426109863910824e-05, 3.9865633880253881e-05, 3.9728394767735153e-05, 3.8410009437939152e-05, 3.8703376048943028e-05, 4.0073082345770672e-05, 4.9260394007433206e-05, 3.6084133171243593e-05, 4.6256896894192323e-05, 3.8977894291747361e-05, 4.1921521187759936e-05, 3.9288890548050404e-05, 3.7661946407752112e-05, 4.2773473978741094e-05, 3.8009638956282288e-05, 4.0047652873909101e-05, 3.8982965634204447e-05, 4.3353025830583647e-05, 4.4863194489153102e-05, 4.0011855162447318e-05, 3.8502919778693467e-05, 5.115899330121465e-05, 4.9245871196035296e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -27,-53,97,12,89,-8,-75,-81,30,-80,-94,8,54,9,-27,47,-48,-30,-53,-45,-65,-88,3,100,-127,12,76,-44,103,5,-12,-70,76,-52,-76,57,-96,-69,-75,35,66,-81,-85,92,48,-111,101,-20,-13,-55,-29,68,-60,-41,-78,102,8,67,101,-99,-64,79,-49,49,-3,15,69,83,53,91,74,-99,95,-88,41,75,-94,12,-55,28,50,18,88,-38,-52,-46,-73,83,25,97,-9,-95,10,34,29,9, 
  /* [1][0][][] */ -47,31,-61,5,-29,85,43,19,53,-88,-94,114,71,-22,33,65,109,-38,43,120,-45,2,37,34,15,24,-28,105,20,15,105,-58,63,106,0,32,56,63,-5,-49,-57,5,-16,-88,-30,24,-21,-53,-36,-84,116,51,19,87,-67,-37,23,106,58,83,-48,121,-65,-67,-48,39,83,42,109,36,18,17,-101,94,-40,49,82,-38,-38,72,-71,85,-41,-127,30,100,-59,-72,78,73,90,33,82,64,34,-10, 
  /* [2][0][][] */ 54,35,-52,99,-13,-51,94,103,-122,95,-29,127,97,-11,90,-107,-52,-25,42,60,-94,-7,111,29,-43,85,114,11,-58,89,88,98,-62,-14,-82,-100,-79,98,112,-13,-111,-76,19,-1,-79,104,-16,-77,84,36,94,-91,-37,68,31,29,-71,104,-63,7,-9,69,-36,78,98,51,57,88,-85,76,9,-63,41,-68,39,31,-50,-18,7,11,43,-89,-2,-56,3,-107,-12,-40,90,106,-24,15,-41,-105,-38,-72, 
  /* [3][0][][] */ 73,4,35,-18,-63,51,-101,33,99,21,62,1,88,93,68,7,105,97,-49,22,112,-83,-53,-93,5,-102,-74,102,43,-94,82,12,-51,-29,-14,-11,-82,-19,37,45,-18,-73,-93,2,76,39,-37,-60,72,-74,46,7,88,30,82,-90,-104,-107,-98,-42,-89,34,-28,69,58,-28,-58,-26,-27,-57,12,95,19,-97,51,-43,38,127,92,-56,-82,-101,33,95,29,52,-37,-93,-77,43,3,-100,84,-72,-80,43, 
  /* [4][0][][] */ 50,88,-2,60,-28,-16,25,20,94,85,-6,43,22,-13,-11,-57,-14,-6,-7,10,110,-67,76,18,23,7,49,-55,-45,23,-63,-44,59,100,11,-80,-49,47,-96,38,-24,-46,-15,-83,25,114,46,63,21,6,22,-22,-83,33,-72,13,77,-87,25,15,6,-71,-26,-64,-47,45,7,-31,24,-42,-67,-71,-51,72,87,54,49,-19,-5,-43,8,-36,-33,31,3,60,83,6,-97,-44,54,37,38,127,-51,23, 
  /* [5][0][][] */ 106,-95,86,91,48,-111,34,67,83,-108,4,-58,31,103,44,39,66,63,-66,106,32,59,19,-21,-127,-59,-6,-93,58,41,26,-97,-35,7,-63,21,-113,-32,56,35,-89,-56,47,103,-32,12,43,-55,-124,105,30,25,48,21,44,-13,105,60,-57,-39,39,-60,36,-65,-25,107,-18,30,83,10,105,-65,-42,84,-22,-71,11,-44,14,86,115,45,37,94,-82,70,0,30,71,-106,120,100,-17,1,81,-90, 
  /* [6][0][][] */ 12,-48,108,70,-91,-64,-7,60,-13,-89,0,-95,80,50,109,-124,41,0,-6,96,-86,-127,105,54,-63,-88,-16,-61,-34,-120,43,-81,-98,-127,-53,-113,-16,34,-116,76,85,57,18,-19,-112,107,-96,-51,-73,12,-32,-66,54,-59,91,-34,4,-14,-72,109,-102,-4,62,-78,-58,63,95,-54,73,-12,-114,-11,51,-76,-97,-47,-82,-107,-63,-34,28,-30,38,-25,-77,-84,-46,-98,80,92,92,11,-58,-67,71,-33, 
  /* [7][0][][] */ 127,73,-38,-45,-77,120,-20,9,108,9,-103,18,61,-95,53,84,52,18,7,126,57,39,-7,92,-91,113,49,57,-81,120,-18,38,25,27,75,107,-114,100,-3,-25,100,-90,96,78,56,-12,112,-121,44,-61,-119,-85,-23,93,25,35,116,-93,-2,-64,12,-5,86,-117,-74,-61,81,26,-115,27,69,96,96,34,71,65,-71,57,-104,50,100,-43,-12,-95,94,33,-119,97,91,9,95,71,-62,-67,-1,-71, 
  /* [8][0][][] */ 0,33,-57,-102,48,16,-86,-31,35,25,36,82,-8,-52,-98,-78,-78,92,-71,9,30,-34,79,100,-106,85,32,70,-82,7,-105,109,85,-42,37,-14,111,-1,-27,57,76,101,-123,-127,-18,-24,-31,108,33,-96,-74,-1,-76,-19,-44,-123,45,97,-98,98,104,30,44,98,-45,-57,-33,95,-98,43,34,-10,68,66,1,16,-56,104,84,70,26,70,-122,-73,20,47,67,-38,35,-33,-87,90,-92,-81,-57,68, 
  /* [9][0][][] */ 8,30,105,50,81,-78,-29,-105,75,53,6,46,-20,-56,-80,-21,13,13,-76,-54,28,94,-82,-85,127,5,-20,32,-6,-56,-74,100,68,8,27,1,-60,25,-33,-58,71,-28,55,-83,71,50,-90,49,92,14,-49,-13,69,-65,-52,89,101,-55,3,18,-72,91,80,-63,-73,10,95,52,-33,91,108,-66,5,81,-91,-66,-68,-93,-28,97,39,43,89,70,-35,-74,43,8,100,37,-16,99,115,29,77,-11, 
  /* [10][0][][] */ -52,79,99,-58,-7,112,113,38,10,42,29,-52,108,84,-24,13,-28,80,-89,-55,-19,36,58,-59,11,60,-103,-110,-38,89,-82,-75,90,105,127,78,-35,10,-25,49,-32,112,-104,-33,-92,-69,7,-62,-15,-1,42,4,70,27,-54,-22,-104,-4,28,-42,4,90,107,51,124,-69,-86,-20,30,-9,-93,-59,94,69,-75,109,-13,71,66,22,83,5,64,86,-97,55,106,-39,36,2,-5,-58,-50,-82,-37,-74, 
  /* [11][0][][] */ 118,0,-6,109,124,52,59,42,77,102,-71,127,3,-79,36,-69,-51,-104,71,46,29,80,25,-101,-121,-88,-6,69,89,5,36,-15,-83,-67,62,49,-57,77,-18,-41,-24,101,-71,3,-43,-80,-80,-91,46,101,115,39,-82,-89,26,38,-71,-44,-30,-90,-73,98,81,19,37,91,-48,27,95,65,-85,-64,48,106,-92,52,-71,38,-47,84,-99,-22,-61,-68,47,-96,23,-54,-93,-21,10,-90,-85,-63,-62,-49, 
  /* [12][0][][] */ 22,69,-48,8,98,16,-29,47,-102,72,-8,28,-37,17,59,-78,-96,-31,-41,-75,28,-3,20,108,-87,-43,115,-99,105,25,-26,124,-82,-65,-37,21,4,-71,-9,58,122,40,-106,-35,-18,-96,-31,119,-59,-119,-72,102,47,7,-74,99,-23,-49,55,72,68,127,-6,66,123,40,-36,122,67,114,44,82,95,123,-9,-2,-33,40,-117,-93,-52,110,57,0,-33,22,62,107,-93,-118,95,54,106,-42,38,72, 
  /* [13][0][][] */ 118,-62,111,104,102,122,88,76,54,-96,18,-18,99,76,75,-44,-117,-70,-63,36,70,-22,122,-43,-78,47,16,21,-80,-81,93,43,45,110,-13,42,-80,-24,35,81,-61,78,-46,17,-41,19,4,-28,6,103,-30,-111,-92,34,111,-74,-50,38,-22,-73,-19,127,-77,24,-46,-60,-84,90,-30,-4,99,6,-85,45,-69,-38,-106,73,86,-61,59,-95,107,8,-81,-113,100,113,-8,-55,-74,62,116,-76,76,-8, 
  /* [14][0][][] */ -51,-102,92,73,81,-31,-11,-101,-96,-33,74,90,-23,-80,-82,-80,-48,-56,22,30,-44,38,1,66,-127,-67,-22,29,-105,-107,-69,40,103,-19,-25,4,99,120,42,-98,-5,-115,40,92,66,-121,71,-80,88,37,79,46,103,-12,-10,21,-59,17,47,100,-10,-75,-22,79,-84,-12,85,-104,-81,-82,-88,99,11,86,57,-70,54,-106,57,35,49,-26,-106,-52,-109,-106,-107,97,109,3,88,-46,77,78,-10,55, 
  /* [15][0][][] */ 4,-21,-24,59,67,-79,42,-76,89,-8,-60,0,79,10,-74,-88,67,5,-51,24,64,24,58,81,89,52,24,69,9,37,44,-87,1,-1,-56,-4,-53,117,89,-63,8,86,-32,-22,16,-44,-21,-43,-2,-49,-7,27,-84,-90,-43,-16,57,34,-36,86,-39,-62,3,75,-35,69,-54,2,-56,27,79,-61,11,27,45,-83,-6,52,93,77,-65,40,-68,-37,-98,-17,-79,63,77,85,-64,-39,50,127,-90,124, 
  /* [16][0][][] */ -87,4,102,-75,35,113,-67,32,86,39,-124,60,-26,-58,-69,-67,109,84,68,63,120,75,-44,46,-12,51,-89,67,-122,3,32,7,-123,76,50,57,-45,54,-63,-91,20,-48,72,93,65,127,98,-11,-46,-119,0,127,-54,118,63,34,33,85,76,11,118,105,40,56,50,7,-50,99,37,95,-36,-19,23,96,61,92,-15,97,-120,-15,7,-96,53,32,9,126,102,23,83,21,-14,110,72,-6,-100,36, 
  /* [17][0][][] */ 24,-118,27,66,-39,-103,-73,-77,6,-78,61,59,87,37,-92,25,37,29,84,93,-96,-15,-6,-36,-11,47,-54,5,94,-39,-26,55,-39,-31,27,-8,-42,71,-75,-10,-99,-63,-24,-24,-17,-19,78,-107,50,69,-20,5,-18,56,74,-59,-127,81,-92,-110,12,-68,38,81,-70,-73,39,-105,-87,2,75,21,12,-114,-65,37,85,-38,14,-75,3,-32,-67,-111,-114,32,60,-49,-5,39,-104,-94,-24,55,3,-17, 
  /* [18][0][][] */ -102,95,101,-76,-15,-119,-110,1,2,68,-114,-54,-44,27,54,-63,14,-29,86,-29,96,-54,15,-85,70,-103,-25,104,22,27,-7,35,38,-35,-115,-113,-39,39,-40,56,-47,-5,-53,-16,-122,51,26,30,18,-28,65,30,-116,-16,-3,79,-33,28,-25,-123,78,102,9,29,-76,-127,-37,83,61,-81,-75,103,-104,-8,-95,-110,49,89,-6,-78,-63,-14,13,-69,98,-28,63,65,-113,-77,-61,99,83,-49,43,-13, 
  /* [19][0][][] */ 28,28,71,38,56,-46,89,82,113,-44,27,-11,-85,41,-47,54,73,-97,102,54,-12,82,-51,15,89,-68,26,-60,-83,-110,-61,44,87,-72,33,9,10,-64,-55,-96,43,-108,-77,9,-71,32,73,-88,15,41,-36,43,-33,15,6,-6,36,90,0,-26,50,-49,96,57,-66,5,-27,0,-8,48,83,-47,-57,-111,-54,-74,-18,-75,15,101,56,-89,-29,79,-80,9,12,-3,86,29,-3,62,-13,127,67,-39, 
  /* [20][0][][] */ -11,71,69,96,-87,93,17,54,45,12,-87,-1,-8,91,39,-72,-47,-40,-66,-30,28,-44,-75,-72,100,-72,-107,48,21,10,-43,112,101,43,-17,62,42,-29,-18,-114,-83,-31,-87,-104,-28,-52,-69,113,63,-112,-99,48,45,108,51,-4,104,69,102,87,109,-57,-62,-36,-28,-66,-53,16,-84,-73,-59,75,-65,-80,28,21,110,86,109,113,86,11,82,-9,61,127,-16,84,22,103,33,63,30,54,-6,16, 
  /* [21][0][][] */ 97,79,77,-105,105,-76,80,25,-23,-64,-72,48,4,36,-51,-94,-108,-34,34,-13,112,-53,73,-87,45,-87,-30,76,20,9,-2,-21,4,21,-93,-117,117,103,-116,-29,-5,6,33,-14,-108,-95,-86,93,-33,-75,-2,89,42,71,-92,28,-54,59,-55,127,62,-76,11,-8,88,32,-31,-75,-107,1,56,84,33,-19,77,72,-120,-33,65,105,16,104,40,-85,23,-111,69,-95,-110,77,109,-116,-49,-86,76,-36, 
  /* [22][0][][] */ 25,-50,-71,-101,80,-61,98,41,-109,68,-70,-98,102,-113,-108,-78,28,77,-120,-62,77,-75,27,28,71,-12,-106,90,-56,-70,-62,-105,43,53,14,4,1,-34,-57,-107,-8,-16,-18,86,46,-111,71,-23,-59,-98,-13,-38,-61,-82,-49,30,-36,-30,-21,-30,98,-71,-73,-107,-64,14,-106,-44,98,75,-30,-7,-64,-9,59,-89,40,-67,58,81,91,-96,-90,-127,72,81,87,-32,-55,22,-67,54,13,-3,-46,75, 
  /* [23][0][][] */ 74,-98,13,67,108,-106,12,-94,28,-72,93,91,27,-108,29,-43,99,-36,-103,110,95,-77,107,-27,-39,-8,97,23,83,60,84,-33,-35,50,29,40,105,-4,-107,22,-103,-1,14,-111,-69,-109,125,25,69,-118,-86,-57,92,-57,-44,103,-91,-10,100,48,-109,-83,-59,-1,42,44,-110,-112,74,-5,115,-68,1,-33,-34,-96,47,-16,96,119,-49,-47,31,-127,98,-7,123,-36,-95,33,109,2,110,-82,-26,79, 
  /* [24][0][][] */ -68,-49,-93,-58,-74,-106,-60,-78,36,127,88,61,123,64,-28,-113,-70,45,35,-42,96,-70,-54,-25,31,-22,87,58,116,65,15,-56,6,15,59,35,-46,-78,70,-6,-71,-102,111,10,28,-46,51,70,-97,-46,-15,15,80,65,80,-60,-9,88,23,6,98,7,33,105,-88,102,-34,-85,-92,66,-55,-17,-28,46,101,105,67,-66,-103,-80,-69,-87,-51,-119,3,55,-7,-112,26,-114,9,-66,-10,8,-84,29, 
  /* [25][0][][] */ -79,-63,-72,-3,103,-65,-96,64,18,-101,-34,38,81,-2,-103,-26,-69,61,20,-105,60,89,-12,-49,-17,-47,-91,40,88,-79,51,121,100,-106,54,77,103,-63,-17,-4,-82,96,-107,7,104,24,68,25,-125,84,-67,-8,54,-13,-53,24,-28,64,-111,78,127,55,44,57,9,82,-10,-7,-83,2,-32,-109,43,-118,77,23,75,76,5,19,56,56,-48,65,-75,-58,-97,-102,-29,-60,99,32,-115,-44,-13,-97, 
  /* [26][0][][] */ 56,-104,-19,-7,-90,5,-10,-15,-75,-107,94,74,-71,-36,9,-11,117,30,-71,-56,17,66,93,12,61,60,11,45,11,3,-84,1,-28,-51,-90,-91,-59,80,-47,96,-88,100,52,30,-39,78,-30,100,-5,31,-5,94,9,-42,-1,-94,89,56,53,20,-1,-86,65,-20,104,-14,-52,57,-76,78,86,86,75,-83,-78,11,44,-90,-85,15,-25,79,76,-57,76,19,-40,22,-72,110,20,14,-41,127,43,89, 
  /* [27][0][][] */ 24,48,-36,-76,-91,-50,-41,-22,97,91,66,-104,-12,75,82,15,74,21,74,-64,-44,21,15,-10,-36,60,-105,34,59,19,-25,18,81,84,-72,-50,-56,-23,-92,66,-55,49,43,54,114,74,64,127,125,97,74,-40,-73,-50,1,-29,120,-22,-59,-27,-14,-48,5,49,44,-17,-84,127,55,8,-74,29,60,-18,19,-41,86,-74,113,119,99,3,102,4,-32,-14,-13,86,-1,33,0,-30,74,63,101,94, 
  /* [28][0][][] */ 75,-18,76,33,-124,-74,-109,-83,-47,-117,45,60,-92,-97,-9,86,79,95,-81,62,-36,10,-118,-84,-114,67,-94,-73,-84,-85,-13,-32,-113,3,66,57,14,-114,-51,18,88,30,-99,36,-115,-21,2,36,11,-74,-88,-39,-95,11,41,26,42,-25,70,37,-16,-54,-108,-7,45,58,-32,66,-90,17,-115,-53,56,33,-18,-109,-127,-64,-96,33,-84,-101,97,-32,47,-119,52,-82,-114,-70,-47,-77,-49,41,-99,-75, 
  /* [29][0][][] */ 47,56,50,-59,-95,13,-124,0,127,-23,-95,-105,102,-110,-56,-48,-96,103,23,-70,-77,-41,55,-1,-14,1,-51,-29,-111,-14,98,-6,44,-3,-88,-63,-14,101,-14,90,47,112,-48,80,-4,118,-59,-20,30,-11,57,-90,67,-106,108,40,-97,51,-49,108,-121,90,-94,-58,-66,-68,47,87,91,-90,34,-79,107,76,57,23,116,-63,-31,33,-11,-89,-13,-64,63,124,40,88,-41,102,72,75,-113,27,-7,62, 
  /* [30][0][][] */ 45,-8,-23,52,-51,41,-18,-3,127,6,42,-26,-59,40,65,43,21,61,99,-57,71,-58,-45,25,-46,46,-42,126,7,-76,-48,38,-40,-24,-72,-13,28,19,19,26,103,-23,16,110,106,5,89,75,-18,93,49,-51,97,-13,19,93,-25,-26,-28,0,-43,14,-22,1,-60,-36,-52,102,-23,102,62,9,-54,111,57,-27,-12,-48,-14,-22,51,49,-63,26,-55,63,-54,121,14,-48,89,60,3,30,48,-17, 
  /* [31][0][][] */ 68,-51,33,90,45,52,-40,-75,18,-18,-53,-84,81,-80,-34,115,-34,-51,68,56,70,33,-5,86,74,-79,31,41,-55,-59,39,96,16,26,-73,8,82,15,-44,-94,61,-31,-18,33,9,0,-9,55,99,64,89,2,-88,-42,-58,13,-71,55,21,106,-26,-4,92,-59,66,94,-22,-45,66,-84,-77,18,-75,0,14,23,-39,-26,58,93,-51,-24,60,91,66,112,-80,45,41,-14,-33,-46,22,127,2,18, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0020617607515305281, 0.0019044869113713503, 0.0018597189337015152, 0.0019827517680823803, 0.0020729152020066977, 0.0017819575732573867, 0.0017988984473049641, 0.0016951985890045762, 0.0017997061368077993, 0.002111171605065465, 0.0018527493812143803, 0.0018463712185621262, 0.001785099389962852, 0.0017987336032092571, 0.0018623905489221215, 0.0022893694695085287, 0.0016770047368481755, 0.0021497823763638735, 0.0018114917911589146, 0.0019482963252812624, 0.0018259453354403377, 0.0017503333510830998, 0.0019878908060491085, 0.0017664922634139657, 0.0018612085841596127, 0.0018117274157702923, 0.0020148253533989191, 0.0020850102882832289, 0.0018595448927953839, 0.0017894174670800567, 0.002377606462687254, 0.0022886944934725761, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1525, -58, 4357, 5559, 5688, -3097, 4809, -1459, -2124, -823, 5080, -2470, 4749, 7118, 2337, 2668, -850, -645, -2067, 5825, 2443, -957, 3366, -982, -818, 3386, 1714, 2436, 6812, 2565, 4608, 1661, 1728, 5626, 6543, 4653, -693, 4249, 3735, -5392, -401, 1515, -9, 1964, -1366, 495, -1592, 1000, -8387, 2412, 1267, -4106, 8833, -1021, 2110, 1443, 1310, 3054, -980, -2379, 166, 1849, 453, 4813, 6919, 4198, 3385, 6574, 4838, -809, 3568, 5489, 3946, -2064, 6167, 8685, 918, -4132, 627, 1352, 11904, 2133, -680, -2758, 1243, 842, 1750, -2389, 4233, -665, 4547, 1445, 154, -3693, -193, 1970, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00013321515871211886, 0.00020325824152678251, 0.00012715143384411931, 0.00013821716129314154, 0.00011113588698208332, 0.00013163700350560248, 0.00012403166329022497, 0.00017412364832125604, 0.00017687054059933871, 0.00019125256221741438, 0.0001289125211769715, 0.00017374758317600936, 0.00011797207844210789, 8.5982006567064673e-05, 0.00013647711602970958, 0.00014958369138184935, 0.00019232546037528664, 0.00015797775995451957, 0.0001444666413590312, 0.00010624440619722009, 0.00017531010962557048, 0.00013401151227299124, 0.0001079437424778007, 0.00013518644846044481, 0.00025300798006355762, 0.00017600605497136712, 0.00017062021652236581, 0.00013900631165597588, 0.0001060131035046652, 0.00016642868285998702, 0.00011430143058532849, 0.00014037018991075456, 0.00016142474487423897, 0.00010877962631639093, 9.257608326151967e-05, 0.00010703100997488946, 0.00014398311031982303, 0.00010275995737174526, 0.00010696185927372426, 9.9261065770406276e-05, 0.00016968366981018335, 0.00012834891094826162, 0.00019447434169705957, 0.00013140118971932679, 0.00016562618839088827, 0.00016427952505182475, 0.00015436060493811965, 0.00014403795648831874, 8.24417729745619e-05, 0.00011455738422228023, 0.00019896277808584273, 0.00012308705481700599, 8.5121835581958294e-05, 0.00016435232828371227, 0.00015488910139538348, 0.00017415166075807065, 0.00014513080532196909, 0.00012540760508272797, 0.00015331515169236809, 0.00013553195458371192, 0.0001814674906199798, 0.00014462490798905492, 0.00016231488552875817, 0.00013703938748221844, 9.9010838312096894e-05, 0.00011291982809780166, 0.00011349574197083712, 0.00010923675290541723, 0.00013779892469756305, 0.00016573551692999899, 0.00013545205001719296, 0.00012424953456502408, 0.0001112866957555525, 0.00011310889385640621, 0.00011307332897558808, 9.1628615336958319e-05, 0.00012266734847798944, 0.00015362528210971504, 0.00015279330546036363, 0.0001428862742614001, 7.0691741711925715e-05, 0.00013660003605764359, 0.00015253823949024081, 0.00014416950580198318, 0.00015737333160359412, 0.00016323392628692091, 0.00014373264275491238, 0.00015353715571109205, 0.00014924995775800198, 0.00013815847341902554, 0.00013240092084743083, 0.00014728448877576739, 0.00013027468230575323, 0.00010173863847739995, 0.0001994351769099012, 0.00012520220479927957, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -13,105,-80,44,44,-39,91,65,-71,10,38,-93,96,127,-65,26, 
  /* [1][0][][] */ -19,-5,-60,-22,-7,45,23,-127,32,-45,-24,-56,-12,-42,-57,4, 
  /* [2][0][][] */ -19,-30,33,78,28,48,-110,127,-17,5,72,-64,-25,-64,-45,63, 
  /* [3][0][][] */ 82,-86,80,1,-10,-39,-33,127,-37,62,70,53,2,52,5,17, 
  /* [4][0][][] */ -50,-20,-2,59,-98,6,-35,-123,-12,-8,28,-14,51,46,105,127, 
  /* [5][0][][] */ 127,18,-32,-32,-73,23,27,68,24,-11,63,89,112,29,-89,0, 
  /* [6][0][][] */ 10,-28,-55,-47,-84,2,-6,-44,-65,-53,-36,28,103,50,127,-2, 
  /* [7][0][][] */ -54,35,-31,-76,-1,-57,-75,12,-100,53,-68,-62,-127,-35,13,87, 
  /* [8][0][][] */ 48,36,76,15,55,22,69,12,67,-28,36,-3,-127,-27,-73,13, 
  /* [9][0][][] */ -33,62,26,-42,-23,-10,27,-15,-26,50,-40,12,37,127,27,24, 
  /* [10][0][][] */ 73,56,-41,52,-35,-23,60,-46,-86,-40,-46,-104,-127,-74,12,108, 
  /* [11][0][][] */ 43,7,63,7,-18,-36,11,100,-97,24,-30,9,-3,-8,55,127, 
  /* [12][0][][] */ -61,-20,12,2,17,-9,122,38,-80,28,10,-1,6,83,-50,127, 
  /* [13][0][][] */ 7,60,37,63,107,41,117,127,-57,104,-84,-60,40,111,-118,-18, 
  /* [14][0][][] */ -127,120,10,-20,-10,-3,53,5,-51,29,116,1,-89,17,-50,57, 
  /* [15][0][][] */ -6,-19,-127,-46,76,-37,-76,-34,-17,-22,-16,-65,-6,-76,-56,41, 
  /* [16][0][][] */ 123,-19,1,-23,36,-26,41,-22,-28,6,127,47,38,7,-36,9, 
  /* [17][0][][] */ 19,10,-30,-103,-5,-58,119,-127,8,-22,-47,24,33,72,2,43, 
  /* [18][0][][] */ 33,127,-19,-41,65,-69,-15,-59,-34,125,-27,-2,-28,62,-6,-34, 
  /* [19][0][][] */ -77,-110,127,-88,38,-126,26,-33,38,49,89,99,29,-10,61,-24, 
  /* [20][0][][] */ -17,98,62,4,11,-4,12,-27,60,-3,99,-23,-127,-24,-73,-9, 
  /* [21][0][][] */ -70,40,24,28,71,43,75,47,-127,54,-48,17,-22,22,-62,-27, 
  /* [22][0][][] */ 10,-81,48,16,14,-127,98,9,11,-45,-39,-70,47,-88,-53,-45, 
  /* [23][0][][] */ -59,-106,39,58,36,-19,28,-41,27,-42,82,0,1,77,79,127, 
  /* [24][0][][] */ -10,-6,31,83,48,21,-51,-127,62,22,-37,17,3,6,-18,-24, 
  /* [25][0][][] */ -4,31,14,-55,-20,0,14,-29,-19,49,-42,-16,31,127,22,1, 
  /* [26][0][][] */ -69,81,9,21,27,-89,-8,-28,11,21,15,72,13,5,-76,127, 
  /* [27][0][][] */ -15,-127,-51,-2,-59,95,-2,-64,22,-39,58,-33,25,-46,-105,-24, 
  /* [28][0][][] */ -39,1,41,83,25,6,-43,-125,-127,47,102,-8,81,7,-45,-22, 
  /* [29][0][][] */ -127,105,-17,-25,-29,17,-123,-64,-49,-27,1,1,13,-51,-100,64, 
  /* [30][0][][] */ 47,75,-45,85,-103,-101,-77,-12,-48,1,1,-102,127,29,-15,98, 
  /* [31][0][][] */ 127,31,-65,-36,-62,24,96,35,-54,-12,66,46,34,25,-25,2, 
  /* [32][0][][] */ -27,-19,127,2,-17,78,72,19,-14,-9,-9,22,1,73,65,35, 
  /* [33][0][][] */ 6,29,-78,-62,-17,29,105,27,0,-12,28,-64,81,127,-51,43, 
  /* [34][0][][] */ -103,-24,106,23,34,-47,112,-6,-127,37,43,-42,53,67,-57,-32, 
  /* [35][0][][] */ -11,23,-45,20,-84,115,-37,-12,-30,127,7,102,-57,66,17,43, 
  /* [36][0][][] */ -7,-80,127,-52,-51,21,-45,-13,19,20,-54,79,0,-88,-37,43, 
  /* [37][0][][] */ 98,-8,70,-42,126,-78,-50,28,-58,127,-75,-4,-97,-56,110,-32, 
  /* [38][0][][] */ 44,55,14,-109,-16,-68,-106,64,-101,60,-97,-49,-81,-127,-110,78, 
  /* [39][0][][] */ -73,22,-64,-36,-84,-81,75,11,-127,-33,25,83,38,1,-8,52, 
  /* [40][0][][] */ 127,29,6,-100,-61,27,21,-31,-31,-21,-39,-85,6,61,37,30, 
  /* [41][0][][] */ 89,-75,-54,-41,-6,-1,-58,-17,56,-17,-2,-56,127,-69,47,-34, 
  /* [42][0][][] */ -8,-92,-53,127,5,-94,-118,21,13,3,5,52,-83,80,-51,-10, 
  /* [43][0][][] */ -81,-47,-54,-127,-52,2,2,73,49,-127,-39,32,-22,-53,-34,86, 
  /* [44][0][][] */ -31,34,30,-57,-21,-25,33,124,127,-86,84,110,113,52,-20,-3, 
  /* [45][0][][] */ 38,74,-83,87,127,-87,-33,-63,112,-62,76,-61,-26,15,-73,59, 
  /* [46][0][][] */ -28,-40,12,-15,98,-29,29,24,-14,127,-25,-122,36,64,-48,79, 
  /* [47][0][][] */ 87,-42,-35,-13,84,-13,-40,-60,3,127,-28,37,-5,-109,-76,6, 
  /* [48][0][][] */ 10,22,-17,-127,-6,-51,122,-124,8,1,-37,54,52,65,4,42, 
  /* [49][0][][] */ -28,127,-73,38,42,-65,67,60,-37,21,35,-96,-22,71,120,-89, 
  /* [50][0][][] */ 11,42,-21,6,-127,-5,-64,-57,49,66,26,26,-32,-40,-3,32, 
  /* [51][0][][] */ 127,-33,-49,-9,-46,80,-92,-43,43,-15,-48,62,-30,-69,0,35, 
  /* [52][0][][] */ -30,-41,41,78,-58,-110,-127,-8,-64,-59,-20,-57,29,-60,15,97, 
  /* [53][0][][] */ 25,112,67,-127,3,117,93,-16,-18,-31,-7,-38,91,-124,11,63, 
  /* [54][0][][] */ 38,122,5,-27,2,-85,-109,48,11,-23,-39,127,75,93,23,55, 
  /* [55][0][][] */ -37,-11,51,32,39,-37,90,78,-87,-4,20,12,127,42,-3,5, 
  /* [56][0][][] */ 124,20,29,23,-44,127,-52,-72,-22,57,-85,6,-73,118,-9,40, 
  /* [57][0][][] */ -51,-31,-41,-29,-64,-95,58,-22,-127,-24,58,64,25,35,-12,55, 
  /* [58][0][][] */ 43,-57,64,26,3,-66,-20,11,23,-11,-127,-27,28,-39,-36,49, 
  /* [59][0][][] */ 82,15,-127,88,10,35,82,-33,-65,-47,32,-95,-115,-59,25,104, 
  /* [60][0][][] */ 0,32,-12,18,-12,-21,-25,2,-29,-79,57,124,-48,-127,-33,-10, 
  /* [61][0][][] */ -43,20,87,-82,-78,41,2,111,-29,-91,49,69,105,-11,5,127, 
  /* [62][0][][] */ 77,49,-6,-127,-19,-1,4,-39,-9,37,-42,45,25,-20,-87,-76, 
  /* [63][0][][] */ -5,-19,8,2,-63,-72,-54,14,-78,-10,-31,-14,127,0,49,-8, 
  /* [64][0][][] */ 19,10,-10,67,-117,-53,-23,-79,52,127,36,0,53,-55,-46,122, 
  /* [65][0][][] */ -36,13,-16,-8,-88,75,22,-24,49,-122,103,-63,86,65,-127,71, 
  /* [66][0][][] */ -117,93,-105,-94,47,-26,-109,-73,-92,118,86,0,-127,-53,46,49, 
  /* [67][0][][] */ 6,-28,-127,-108,62,71,7,-26,-27,-4,43,-22,28,39,15,42, 
  /* [68][0][][] */ 51,22,-9,-39,-73,33,10,38,-76,79,126,-18,-2,-49,-127,1, 
  /* [69][0][][] */ 65,-93,57,-44,15,-111,-27,127,-6,70,78,74,-19,69,-30,1, 
  /* [70][0][][] */ 41,10,127,35,99,-30,120,21,24,29,-61,41,-73,61,-82,41, 
  /* [71][0][][] */ 13,29,97,-82,-127,-77,15,5,-18,-12,21,-112,-85,5,16,26, 
  /* [72][0][][] */ -61,-97,24,-127,78,-14,10,42,-66,18,-120,-16,67,116,-70,121, 
  /* [73][0][][] */ 19,23,50,-10,127,-103,-53,9,-42,106,-90,31,-92,-56,120,-16, 
  /* [74][0][][] */ -87,-3,-127,-76,67,-35,-33,19,-69,-5,-119,-32,-40,-61,-42,64, 
  /* [75][0][][] */ 83,-19,49,-40,16,1,-127,-26,-12,-95,68,10,9,-20,-10,-3, 
  /* [76][0][][] */ 7,-67,-42,119,46,99,109,-67,93,-127,82,125,41,-89,-79,42, 
  /* [77][0][][] */ -38,-37,127,-26,41,-24,-30,-123,22,19,31,88,47,52,20,0, 
  /* [78][0][][] */ -45,0,11,-35,-1,-53,34,-14,27,-15,15,-94,-102,-70,-127,-54, 
  /* [79][0][][] */ -99,-69,-13,20,127,30,-22,24,18,33,-11,47,-42,-67,-68,-15, 
  /* [80][0][][] */ 14,-125,48,127,-26,-16,-122,96,1,23,72,0,-97,-2,-17,55, 
  /* [81][0][][] */ 108,69,-17,91,-10,28,23,127,12,8,109,63,122,24,63,-16, 
  /* [82][0][][] */ -57,0,17,-32,35,-127,-122,-87,7,85,-43,-32,-25,100,-77,-26, 
  /* [83][0][][] */ 99,-26,91,-30,-36,-16,-127,3,20,-115,14,-54,-16,0,21,-21, 
  /* [84][0][][] */ 20,-68,-93,25,127,42,37,27,-103,22,-105,-24,40,-32,-75,8, 
  /* [85][0][][] */ 19,71,32,-51,93,-10,37,-102,127,-25,42,-11,85,-84,8,1, 
  /* [86][0][][] */ 117,-32,127,52,-1,-56,66,34,-64,-48,-91,-44,41,20,-67,8, 
  /* [87][0][][] */ -3,8,19,-71,68,-26,-42,13,35,-35,68,-34,-79,-127,-3,18, 
  /* [88][0][][] */ -62,-31,37,-5,23,33,-62,-46,-4,8,-71,-127,-51,-36,-16,-18, 
  /* [89][0][][] */ -72,11,22,-64,29,9,-127,18,91,23,-69,-8,-9,-87,-43,-24, 
  /* [90][0][][] */ -18,-19,-23,-83,127,13,-61,43,35,58,33,-12,29,15,-71,-13, 
  /* [91][0][][] */ -38,-76,16,58,-41,-2,-7,89,-33,-66,36,-61,-17,76,32,127, 
  /* [92][0][][] */ -30,84,2,-18,-26,58,-101,56,-47,-7,68,1,-28,127,46,30, 
  /* [93][0][][] */ -2,92,-56,-56,56,105,-81,3,64,67,94,65,-127,37,-35,86, 
  /* [94][0][][] */ 24,68,88,12,-127,-35,12,-5,16,-20,24,-19,-49,-19,13,-23, 
  /* [95][0][][] */ 3,29,48,1,127,-17,-90,66,27,16,-77,97,-1,1,96,-43, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0017717217560857534, 0.0027032739017158747, 0.0016910762060433626, 0.0018382469424977899, 0.0014780741184949875, 0.0017507327720522881, 0.0016495840391144156, 0.0023157924879342318, 0.0023523254785686731, 0.002543601905927062, 0.0017144980374723673, 0.002310791052877903, 0.0015689934371039271, 0.0011435350170359015, 0.0018151048570871353, 0.0019894184079021215, 0.0025578711647540331, 0.0021010569762438536, 0.0019213632913306355, 0.0014130189083516598, 0.0023315721191465855, 0.0017823131056502461, 0.0014356195461004972, 0.0017979394178837538, 0.0033649306278675795, 0.0023408280685544014, 0.0022691979538649321, 0.0018487423658370972, 0.001409942633472383, 0.0022134517785161734, 0.0015201749047264457, 0.001866881619207561, 0.0021469008643180132, 0.0014467365108430386, 0.0012312342878431082, 0.0014234804548323154, 0.0019149323925375938, 0.0013666767627000809, 0.0014225607737898827, 0.0013201425317674875, 0.002256742212921381, 0.0017070022877305746, 0.0025864506606012583, 0.0017475966596975923, 0.00220277882181108, 0.0021848685573786497, 0.0020529499743133783, 0.0019156618509441614, 0.0010964509565383196, 0.0015235790051519871, 0.0026461456436663866, 0.001637021079659462, 0.0011320949997752905, 0.0021858369000256062, 0.002059978898614645, 0.0023161650169640779, 0.0019301964202895761, 0.001667883712798357, 0.0020390457939356565, 0.0018025345634669065, 0.0024134635459631681, 0.0019234681967645884, 0.0021587396040558815, 0.0018225829117000103, 0.0013168145669624209, 0.0015018000267446041, 0.0015094594564288855, 0.0014528161846101284, 0.0018326845020055771, 0.0022042328491806984, 0.0018014719244092703, 0.0016524817328900099, 0.0014800798380747437, 0.0015043144812807441, 0.0015038414858281612, 0.0012186332605779171, 0.0016314390813931823, 0.0020431703887879848, 0.0020321053452789783, 0.0019003448542207479, 0.00094017904484644532, 0.001816739677451551, 0.0020287130028009415, 0.0019174113404005766, 0.0020930182654410601, 0.0021709625143557787, 0.0019116012845188379, 0.0020419983193278313, 0.0019849799573421478, 0.0018374663777649403, 0.0017608926864340901, 0.0019588398281484842, 0.0017326143570244312, 0.0013530935393646359, 0.0026524283457547426, 0.0016651519108563662, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 9868, 16474, -2475, 3031, -1116, 4753, 948, 3787, 16688, -2867, -7792, 9465, -14523, 15322, 4309, 10097, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.8717680076370016e-05, 7.3750110459513962e-05, 5.5443157179979607e-05, 6.9509544118773192e-05, 7.9112709499895573e-05, 6.9881782110314816e-05, 5.2489194786176085e-05, 5.48599346075207e-05, 9.8961078037973493e-05, 6.6722590418066829e-05, 5.5699620133964345e-05, 5.3169322200119495e-05, 7.5148192991036922e-05, 5.8569068642100319e-05, 9.2654525360558182e-05, 7.1956150350160897e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -114,44,62,-19,-82,-12,-69,18,-60,6,-6,-34,31,41,33,-30,22,4,101,10,10,-61,127,75,62,22,3,39,-58,-114,-88,18,-40,-55,21,24,11,19,4,18,-8,-7,-86,7,-72,-31,3,94,-16,22,-39,-26,-6,10,26,-48,-103,13,-13,73,65,37,-1,17,-32,-64,-34,28,-52,-72,8,-14,18,-6,-74,-59,-55,5,-38,-3,-54,57,88,-72,19,52,18,45,30,-22,-3,-33,-29,-38,-56,16, 
  /* [1][0][][] */ 40,15,28,-52,-60,-21,-9,13,-20,25,50,-60,5,-18,-62,-39,-15,-7,-68,30,-9,-79,4,47,-13,-59,-3,-48,65,-108,109,-78,50,27,-21,52,33,74,-19,-36,30,18,-8,-15,8,50,-127,-44,-54,-51,-20,-22,32,-48,-36,41,12,-5,-31,19,22,48,-11,-95,-18,-12,-64,-8,7,-8,-81,-5,-46,-24,11,-78,10,23,32,-65,-25,-23,-86,-31,27,-40,-27,24,-80,-9,-58,46,19,59,-55,49, 
  /* [2][0][][] */ 86,-43,20,21,26,-84,71,-8,-9,-8,-19,-10,-82,-28,16,-43,-99,-49,-46,46,4,-51,-50,21,-13,-76,7,-30,-38,39,-60,117,-57,127,-25,19,-12,-13,-20,-8,-94,82,79,13,-66,10,-22,-18,34,-2,-41,-47,52,-28,-22,60,39,-9,45,-2,2,38,-33,0,70,16,-10,-15,30,56,-41,-8,42,49,73,49,37,-72,65,58,80,-4,-47,30,-63,26,15,69,13,8,-27,28,-50,56,-20,30, 
  /* [3][0][][] */ 5,-6,-21,5,17,-4,8,-61,-16,56,30,59,31,-11,-44,35,-1,-30,24,11,10,127,35,-46,2,18,-18,6,61,-39,56,-21,-24,35,-25,-29,16,44,26,13,-67,-27,-32,21,-32,33,21,-4,-23,-50,-12,-18,44,-76,-27,-48,10,75,-29,3,-12,-17,-44,0,20,51,-38,-3,-24,0,12,-66,-37,-47,31,-7,16,1,-35,-22,-23,1,-46,6,-18,-34,25,-20,-3,17,21,-10,40,26,-31,52, 
  /* [4][0][][] */ 24,11,-43,18,19,23,-46,19,-34,74,98,-21,-15,3,1,-43,15,-9,-26,45,21,-54,50,84,-61,7,-127,26,-38,-56,9,23,-58,-56,13,61,12,36,24,20,-35,-45,42,-29,-11,7,-30,59,-39,64,22,12,38,-6,-75,24,51,-16,11,-7,52,-6,20,20,-46,8,-29,10,-43,30,-51,58,51,-63,-32,-57,22,-60,-7,1,-41,78,-72,3,-18,22,28,-59,54,6,31,1,-55,-28,37,28, 
  /* [5][0][][] */ -83,41,44,-2,50,-15,53,-29,-18,30,1,-35,39,-21,-27,-34,-4,-33,57,20,-117,-25,-76,54,-29,-4,46,11,54,-76,-12,56,62,122,-18,37,0,18,53,-22,-38,98,70,-28,6,71,46,-7,0,23,-15,26,17,-28,26,-99,40,-44,-64,-68,69,109,-48,-14,77,-48,-68,-60,-63,-28,-65,-6,-20,8,-32,-50,17,-40,-30,-25,127,-38,25,-97,-79,45,42,-16,-45,42,31,-5,-9,33,13,99, 
  /* [6][0][][] */ 37,-12,-83,37,-46,-125,114,90,-67,73,-23,85,-121,-76,68,54,-6,-59,-13,0,-3,-12,-65,-72,-68,41,79,37,36,28,97,-58,20,10,14,-81,6,9,28,75,12,18,-56,-31,-3,-64,-86,22,35,-127,-32,84,38,3,-13,-72,80,41,12,-2,-121,48,-95,-4,29,15,2,55,43,27,-8,-60,-36,29,109,42,74,-30,41,-76,-14,-50,-76,73,-1,-76,42,21,-47,61,39,36,-25,19,-40,116, 
  /* [7][0][][] */ 29,83,-34,-59,-24,-14,37,5,-51,36,-52,-51,-38,15,11,-11,-47,-48,-34,65,-8,127,13,28,-12,2,23,21,47,44,84,-35,71,24,-24,8,2,-8,8,32,-63,-5,19,-56,11,-38,75,-24,42,-75,-86,-29,-50,1,-2,-10,26,9,-97,10,-8,110,15,-29,-20,7,-52,16,-40,-15,-103,28,18,74,-35,45,-56,48,10,-72,-22,-45,61,-71,42,-21,-5,0,-9,71,-83,46,53,-32,-45,12, 
  /* [8][0][][] */ -13,80,-44,43,-44,-19,-81,39,-96,-32,12,0,-39,32,26,89,8,-42,9,5,31,-10,9,-7,-27,79,-1,34,-11,-15,-38,-19,-17,-56,-37,-63,-40,24,47,-3,-7,-39,18,6,-37,-41,7,-9,-19,-7,55,64,-5,-15,-67,101,-32,38,-3,-44,-30,16,14,60,-36,-62,-28,-5,-40,7,-4,7,-10,-53,-113,-23,-51,21,-61,-46,-30,-9,-35,-41,6,0,27,24,14,55,-53,-11,-82,-127,21,-47, 
  /* [9][0][][] */ -8,16,-74,46,-25,-37,75,51,-10,52,-30,96,-33,-24,30,127,7,15,69,16,16,17,34,-101,-45,-11,25,-14,5,-22,37,43,-34,5,6,-123,30,-15,-28,-20,-9,24,46,-29,-10,6,19,13,37,81,19,-4,-55,-84,-1,-3,2,-15,68,-20,-72,52,-66,-38,88,-11,-28,3,-67,28,45,37,-13,91,-18,-17,-26,21,-48,-5,50,-23,59,0,24,-21,-18,-35,-60,17,-3,0,64,41,-50,-4, 
  /* [10][0][][] */ 75,2,-47,-7,-27,-32,76,-10,16,-20,-27,-2,-91,-17,9,-12,-78,-36,18,21,38,42,25,0,-54,73,43,-11,-56,-80,-32,-20,71,-30,53,5,70,-81,78,127,21,-56,12,4,-22,-86,-4,57,29,75,-76,-40,-19,21,16,48,16,-69,73,55,-17,42,-69,-29,-5,-54,14,51,22,-24,-5,39,110,38,27,-76,35,-44,52,-2,-52,39,30,26,-46,-11,0,45,-45,-16,21,59,46,72,-37,5, 
  /* [11][0][][] */ -59,-41,43,-69,14,-16,-34,-42,47,-48,5,-10,-24,5,2,11,-61,-6,62,10,-57,17,-84,-94,17,23,-52,39,33,-52,41,-39,24,-9,17,-19,-73,15,-113,15,-74,66,-45,58,18,15,-3,-35,20,-31,-61,-58,17,29,74,-56,-29,-77,14,-56,-21,-53,-20,-127,5,-67,57,73,121,20,74,-18,-33,-11,60,-39,89,33,27,46,28,-12,-22,96,86,3,-10,-25,-84,-62,-6,18,56,40,59,71, 
  /* [12][0][][] */ 47,-25,-3,-49,44,110,-4,17,59,67,-9,65,21,51,22,-8,-72,42,12,59,127,8,73,-80,23,16,-70,-84,-28,77,2,-4,31,-2,22,-45,43,2,-40,-20,30,-19,52,72,-17,45,0,-17,-71,18,-8,26,-19,-38,10,8,-46,52,9,52,23,-98,16,-114,-3,107,-24,-44,-10,-46,73,5,-24,25,-8,60,-5,52,-80,-2,-28,47,121,21,-20,74,-31,-72,77,12,-85,64,68,12,-18,-91, 
  /* [13][0][][] */ -3,31,-20,-47,-32,-16,11,-47,19,-29,-39,-88,53,-115,-37,-80,-25,-34,-90,-16,-104,-41,12,100,-40,2,115,5,15,-44,54,45,6,6,-119,127,-32,-48,21,-57,126,14,3,22,-4,-97,60,-34,82,-18,-49,34,27,-12,-5,70,73,-62,-48,-11,47,40,-8,-92,-2,33,-41,28,-67,-33,-77,4,-67,24,-38,-83,-106,18,34,89,-19,72,33,-93,48,38,28,-13,-22,-19,-12,12,-69,25,-26,-10, 
  /* [14][0][][] */ -7,24,-81,-22,81,91,-96,3,28,-50,83,-3,23,-22,-42,-64,-66,21,38,127,11,-24,1,12,10,33,-34,73,15,-1,-30,10,68,-5,-44,6,-13,58,79,0,59,-3,26,4,-8,-42,61,-39,26,-6,-11,-29,49,22,-39,32,10,67,-96,-16,-14,-65,-40,-103,5,-49,-46,-3,-78,48,-17,31,7,-39,-28,-42,34,-16,-54,-36,36,-3,-4,-20,-6,45,-8,-18,-33,67,71,17,7,-45,-47,-65, 
  /* [15][0][][] */ -61,-46,39,-67,30,-33,-28,-99,4,21,-13,69,-9,-26,37,83,-115,-25,15,-58,25,-23,-13,-84,38,-17,54,-61,-67,-108,-66,27,-39,63,90,-96,-11,-30,14,-16,-13,-2,42,-16,-3,5,64,97,-46,-20,15,-38,-44,47,17,-61,-94,-23,104,17,-34,9,-91,18,-60,-4,-4,20,53,-63,91,-25,52,-28,-27,-37,20,25,45,15,-17,88,47,38,-9,-20,-127,14,-10,-54,-86,27,38,-26,-25,61, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0024955014232546091, 0.0031343796290457249, 0.0023563341237604618, 0.0029541556723415852, 0.0033622900955379009, 0.0029699758160859346, 0.002230790676549077, 0.0023315472062677145, 0.0042058457620441914, 0.0028357100673019886, 0.0023672338575124741, 0.0022596961352974176, 0.0031937980093061924, 0.0024891854263842106, 0.0039378171786665916, 0.0030581364408135414, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -1379, -704, -3651, -4606, -1105, 1529, -845, -2189, 725, -2999, 8552, -1742, -816, 10285, 8003, -5080, 14570, 2863, -5974, -279, -857, -3126, 685, -2752, 590, -3689, -1080, -5265, -504, -9661, 51, 105, 11651, -3040, -1675, -313, 989, -1492, -600, 6357, 61, -759, 2890, -4581, 12348, 15530, 1733, 16019, -2537, 14001, 13229, -2911, -1076, 1319, 546, 12379, -1136, -1085, 14095, 8316, 8776, 9350, 7588, -7633, 42, 597, -2148, 2057, -2916, -2271, 3447, 911, 11378, 43, -2087, 12247, -1295, 215, 7490, -1925, -1066, 17866, -1060, 4184, 19137, 830, -4734, -3201, 613, -5673, 14159, 333, -3431, -1205, -4329, -2978, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00023234906257130206, 0.00014617538545280695, 0.00011830143921542913, 0.0001872577122412622, 0.00027618577587418258, 0.00025453680427744985, 0.00030083843739703298, 0.0002091725473292172, 0.00024243345251306891, 0.00013611077156383544, 0.00013362565368879586, 0.00035980387474410236, 0.00029121400439180434, 0.00011570860806386918, 0.00016439336468465626, 0.00013027022941969335, 0.00012107589282095432, 0.00022004186757840216, 0.00014378080959431827, 0.00011174342216691002, 0.00017511792248114944, 0.00024793948978185654, 0.00021670770365744829, 0.00021817335800733417, 0.00059614749625325203, 0.00021540149464271963, 0.00024772455799393356, 0.00013038729957770556, 0.00021312660828698426, 7.8040946391411126e-05, 0.00028053313144482672, 0.00020732101984322071, 0.00018023094162344933, 0.0001369015226373449, 0.0002878030645661056, 0.00034171825973317027, 0.00017609979840926826, 0.00035341663169674575, 0.00032258071587421, 0.0001093803730327636, 0.00019917650206480175, 0.0001931296574184671, 0.00021916427067480981, 0.00015893268573563546, 9.9582051916513592e-05, 9.0478577476460487e-05, 0.00019403734768275172, 0.0001134758276748471, 0.00018841230485122651, 8.689494279678911e-05, 0.00013531850709114224, 0.00013979883806314319, 0.00018872223154176027, 0.00016451053670607507, 0.00022208761947695166, 0.00015829068433959037, 0.00018491239461582154, 0.00022025647922419012, 0.00016841429169289768, 0.0001305957994190976, 0.00015152987907640636, 0.00019644013082142919, 0.00014552654465660453, 0.00011953787179663777, 0.00016396571299992502, 0.00023279849847313017, 0.00025662189000286162, 0.00019110541325062513, 0.00021571503020823002, 0.00020425500406417996, 0.0002177436399506405, 0.00013147736899554729, 0.000134085159515962, 0.00022544327657669783, 0.00029156560776755214, 0.00010495125025045127, 0.00012837076792493463, 0.00019134012109134346, 0.00016480928752571344, 0.00022976433683652431, 0.000241214016568847, 0.00010055057646241039, 0.00023652058735024184, 0.00018833641661331058, 0.00010000760084949434, 0.00021356242359615862, 0.00016158065409399569, 0.00022401254682336003, 0.00018075403932016343, 0.00019200526003260165, 9.2895097623113543e-05, 0.00034627330023795366, 0.00020724894420709461, 0.0002554172242525965, 0.00013620425306726247, 0.00028174984618090093, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 34,119,8,17,-24,3,51,43,53,-74,-77,31,-15,2,25,-60,-111,13,31,21,32,75,70,80,8,0,-42,6,-6,23,20,-25,-44,12,-29,94,-12,40,-5,-8,26,-41,-4,14,-77,-80,7,-30,-15,-97,-18,-13,9,56,-14,-8,-68,-54,-64,-127,-127,11,-104,8,-27,40,37,-14,-28,47,37,0,-23,5,45,-9,24,-33,-80,31,3,-92,45,-49,-66,-50,-19,5,-113,10,-97,29,76,-2,66,-5, -40,-28,4,73,-3,103,-28,-6,53,32,-127,44,-22,-51,-77,127,-127,58,72,81,125,19,101,127,29,19,15,53,-4,127,-10,-127,66,110,8,46,57,74,-34,-127,127,-11,81,127,-40,-106,127,-83,-1,-127,-99,-35,16,127,-19,-127,13,32,-127,-73,-27,-127,-53,80,-31,99,103,-24,5,127,127,5,-71,29,-28,-119,54,-59,9,127,-6,-65,127,-89,-127,-45,82,49,101,98,-82,-3,127,-22,127,31, 24,-107,-3,2,-13,-12,-4,54,23,72,-69,16,-12,55,-1,-77,-53,7,15,25,26,53,48,94,11,-36,21,44,6,22,-19,-59,-40,-78,-29,70,-2,7,12,1,-7,30,-20,29,-34,-28,-7,4,26,-77,25,3,-7,-14,14,-9,52,-70,-9,-87,-84,33,-70,4,39,10,-51,-7,-26,10,1,13,-20,-43,0,0,21,-16,-87,-3,-2,-89,21,-27,-15,-30,-14,-26,-90,-7,-35,27,25,43,22,-16, 
  /* [0][1][][] */ 100,-3,67,127,9,-52,127,50,-39,-127,-94,127,4,-127,-50,23,-59,-46,91,28,-105,3,-127,-48,-14,53,-121,127,-56,80,127,70,15,84,8,127,-127,69,-22,-56,55,-127,11,51,-127,-94,-9,-120,-98,-108,-120,16,127,-69,71,-28,-127,0,-69,-14,-77,-53,-32,59,-99,-30,91,-91,-52,29,-50,-127,-123,59,127,-95,116,71,-81,-29,127,-127,-27,107,-32,-11,5,72,-2,20,-84,22,1,-73,77,-22, -127,1,-47,114,-83,-127,-124,-127,72,8,-30,28,-79,-126,-50,121,-117,-127,127,127,32,-127,-98,86,-127,127,17,69,-73,-21,-113,72,-127,105,127,-34,21,127,127,-80,-43,30,12,50,-33,-127,-89,-127,6,-109,-127,127,41,72,50,-80,30,22,80,-28,-6,-31,-127,127,-7,-127,127,127,28,52,-112,-76,-24,58,-100,-127,127,127,112,-39,-73,27,-89,67,-89,-77,127,127,127,127,-127,-127,-80,-51,84,127, 61,-3,104,68,6,-26,15,44,-59,124,-75,63,12,-4,-127,68,34,-39,37,5,-127,9,-86,-49,-4,6,127,8,127,108,6,-104,-37,-127,-17,120,-119,13,-34,-47,-13,109,12,86,-31,-8,-15,-85,127,-89,-85,2,40,-98,-127,15,104,-3,-119,48,-23,-31,8,63,127,-49,-32,-8,-62,-1,-51,-41,-127,-127,0,-50,0,-28,-127,-29,-63,-119,-24,127,-109,19,7,2,-34,-22,-12,41,-10,127,23,-22, 
  /* [0][2][][] */ 30,-127,41,8,22,26,20,64,-48,-38,30,-42,11,-17,-6,39,-4,17,-14,35,-2,66,14,-12,12,58,0,7,-15,23,8,27,-25,-4,-27,26,39,-7,4,-28,4,18,-26,-44,-22,-39,-19,-5,-6,21,-14,20,8,-7,-39,-19,-13,5,3,34,-51,0,47,-10,-35,50,-92,-21,31,-1,9,94,-1,15,16,13,-50,-32,-1,5,16,-54,-11,-60,-96,29,-18,-2,-88,47,-6,33,-1,5,18,-23, -49,7,127,14,127,81,-24,21,-127,14,-74,-48,127,-31,-53,35,27,40,-12,-45,27,30,54,13,58,-56,-11,34,-16,120,-10,25,-79,50,14,7,66,39,26,-85,-22,6,-127,4,-8,-7,-45,-68,2,-62,-20,72,101,-79,-37,-91,-18,127,-33,3,66,-95,105,52,-25,31,-54,14,127,-10,3,108,-63,11,-13,-52,-12,-80,-40,-40,-6,-91,-34,-91,-103,127,49,10,89,54,27,28,-18,-10,6,-10, 17,105,33,4,5,-5,-15,60,-15,69,48,-11,3,5,-9,38,-4,8,4,45,-9,47,0,-9,7,36,18,43,9,31,-18,-62,-46,-5,-17,-10,25,-37,8,-12,-2,-2,-9,-10,-35,-5,-27,2,20,40,6,7,7,-25,0,0,0,10,15,48,-34,17,23,-22,30,17,-94,10,28,-10,4,86,33,-10,3,4,-27,-13,15,4,-1,-80,-5,-39,-67,28,-10,-11,-86,42,28,19,-6,11,9,-23, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.010608093813061714, 0.0066737611778080463, 0.0054011526517570019, 0.008549409918487072, 0.012609495781362057, 0.01162109337747097, 0.013735034503042698, 0.0095499502494931221, 0.011068505235016346, 0.0062142526730895042, 0.0061007924377918243, 0.01642715185880661, 0.013295622542500496, 0.0052827745676040649, 0.0075055188499391079, 0.0059475977905094624, 0.0055278227664530277, 0.010046198032796383, 0.0065644350834190845, 0.0051017408259212971, 0.00799515750259161, 0.011319887824356556, 0.0098939742892980576, 0.0099608898162841797, 0.027217619121074677, 0.00983433797955513, 0.011310075409710407, 0.0059529431164264679, 0.0097304759547114372, 0.0035630255006253719, 0.012807978317141533, 0.009465416893362999, 0.0082285962998867035, 0.006250354927033186, 0.013139893300831318, 0.015601437538862228, 0.0080399857833981514, 0.016135536134243011, 0.014727696776390076, 0.0049938536249101162, 0.0090935723856091499, 0.0088174985721707344, 0.010006130672991276, 0.0072562065906822681, 0.0045465030707418919, 0.0041308761574327946, 0.0088589396327733994, 0.0051808352582156658, 0.0086021237075328827, 0.0039672623388469219, 0.006178081501275301, 0.0063826343975961208, 0.0086162732914090157, 0.0075108679011464119, 0.01013959851115942, 0.0072268955409526825, 0.008442332036793232, 0.010055996477603912, 0.0076890974305570126, 0.0059624621644616127, 0.0069182249717414379, 0.0089686410501599312, 0.0066441381350159645, 0.0054576029069721699, 0.0074859936721622944, 0.010628612712025642, 0.011716290377080441, 0.008725079707801342, 0.0098486524075269699, 0.0093254353851079941, 0.00994127057492733, 0.0060027111321687698, 0.0061217714101076126, 0.01029280386865139, 0.013311674818396568, 0.0047916383482515812, 0.0058608762919902802, 0.0087357955053448677, 0.0075245080515742302, 0.010490085929632187, 0.011012830771505833, 0.0045907218009233475, 0.010798548348248005, 0.0085986591875553131, 0.0045659318566322327, 0.0097503736615180969, 0.0073771020397543907, 0.01022748276591301, 0.0082524791359901428, 0.0087661631405353546, 0.0042412043549120426, 0.015809401869773865, 0.0094621265307068825, 0.011661290191113949, 0.006218520924448967, 0.012863527983427048, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 7557, 2995, 1080, -1519, 4712, 11829, 9000, 1686, -379, 9814, 1404, -4360, 3739, 4534, 467, -577, 3434, 9247, -640, -152, 5418, 13178, 13698, -2132, -3962, -984, 12315, -326, 1513, 1580, 8160, -2310, 9098, 2907, 4424, -4103, 1061, -5612, 202, 2341, 2874, 1304, 1669, -594, 1278, 2218, 5624, 4293, 3841, 2451, 8369, 2822, -2390, 2157, 1682, 2847, 2037, 3021, 8139, 1617, -856, 6367, 4843, 4173, 5052, 10429, -4987, 3532, 7286, -865, 6555, 1660, 4051, 4105, 4565, 3044, -451, 1651, 2416, 3926, 3061, 4384, 8707, 997, 3298, 5126, 820, -788, 20272, -608, 684, -1111, 11713, 3520, 8, -1062, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 9.7717056632973254e-05, 0.00012098869046894833, 0.00014197132259141654, 0.00015276965859811753, 0.00014173124509397894, 6.9491899921558797e-05, 9.1109744971618056e-05, 0.00016390909149777144, 0.00013343340833671391, 7.7719363616779447e-05, 0.00015595214790664613, 0.00010738734999904409, 0.00013922811194788665, 0.00010789544467115775, 0.00019288022303953767, 0.00012611382408067584, 0.00016976619372144341, 8.2719940110109746e-05, 0.00011435055057518184, 0.00014812644803896546, 0.00011593230010475963, 6.624485831707716e-05, 6.4436753746122122e-05, 0.00014122355787549168, 0.00014842965174466372, 0.00013918326294515282, 6.9641435402445495e-05, 0.00011361943325027823, 0.00016784176114015281, 0.00013131005107425153, 0.00010183547419728711, 0.00011460388486739248, 8.6486317741218954e-05, 0.0001591777108842507, 0.00015152983542066067, 0.00014245054626371711, 0.00014787154213991016, 0.00010936367471003905, 0.00016101666551548988, 0.00011397452908568084, 0.00015041299047879875, 0.00018447788897901773, 0.00021635953453369439, 0.00017172482330352068, 0.00019678908574860543, 0.00017051170289050788, 0.00010459673649165779, 0.00014035029744263738, 0.00014366247341968119, 0.00019551912555471063, 8.8208777015097439e-05, 0.00014505202125292271, 0.00014484224084299058, 0.00017009003204293549, 0.00014918016677256674, 0.00014958578685764223, 0.00015372717462014407, 0.00012848606274928898, 9.8631317086983472e-05, 0.00012681247608270496, 0.00021859310800209641, 0.00010946462134597823, 0.00011929850006708875, 0.00013400586612988263, 0.00011345629172865301, 7.4346193287055939e-05, 0.00011309984256513417, 0.00011791292490670457, 8.905284630600363e-05, 0.00017005823610816151, 0.00010240626579616219, 0.00012774973583873361, 0.00010440615005791187, 0.00010221654520137236, 0.00011585696483962238, 9.3455710157286376e-05, 0.00018535947310738266, 0.00020089681493118405, 0.00014600864960812032, 0.00012754445197060704, 0.00014136472600512207, 0.00010868232493521646, 8.4481682279147208e-05, 0.00011887486471096054, 0.00011488868040032685, 0.00013084469537716359, 0.00015681301010772586, 0.00026414351304993033, 4.7451387217734009e-05, 0.00014676102728117257, 0.00024534933618269861, 0.00017397945339325815, 7.4239876994397491e-05, 0.00011268959497101605, 0.00019893872376997024, 0.000111245914013125, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -48,53,-20,-15,-36,-53,-53,-46,48,-59,40,-42,87,-104,1,-127, 
  /* [1][0][][] */ -83,62,-85,-86,-65,18,-29,48,-46,16,76,-35,29,127,20,34, 
  /* [2][0][][] */ -41,-13,-76,21,-11,-45,14,-34,-99,127,79,15,52,64,-42,114, 
  /* [3][0][][] */ -63,-83,-3,-48,-90,20,-50,-125,0,27,45,-80,-76,-32,-127,-47, 
  /* [4][0][][] */ 59,-8,-16,55,-51,-2,-127,46,17,71,16,47,4,0,-41,-61, 
  /* [5][0][][] */ -111,40,-71,-19,62,-69,-33,-68,93,-31,26,-41,20,-120,-127,-91, 
  /* [6][0][][] */ -18,-39,-24,29,-80,67,34,-32,-17,-54,127,-14,2,-3,-118,11, 
  /* [7][0][][] */ -34,111,127,-94,68,89,2,-61,41,74,-102,-16,41,19,31,79, 
  /* [8][0][][] */ -64,25,62,-23,71,9,111,127,-80,-4,-69,-100,44,96,-85,-65, 
  /* [9][0][][] */ 47,31,93,38,-110,-52,-114,-127,81,8,127,30,-69,-97,63,-35, 
  /* [10][0][][] */ -15,-116,7,-84,-117,60,25,34,-33,-79,-6,33,-29,43,-127,28, 
  /* [11][0][][] */ 126,-59,-8,98,-127,-51,52,-20,113,105,-47,50,21,-85,-13,120, 
  /* [12][0][][] */ -56,-61,127,-11,53,-21,24,51,69,-17,99,59,-24,14,-93,33, 
  /* [13][0][][] */ -9,-31,23,29,7,2,127,39,-117,9,14,10,-23,125,103,-69, 
  /* [14][0][][] */ 115,-87,127,4,66,59,102,61,76,69,57,32,66,-41,43,-45, 
  /* [15][0][][] */ -3,123,18,-44,46,127,-84,78,-52,-26,-44,-18,-49,127,-22,-56, 
  /* [16][0][][] */ -38,68,114,-44,22,78,-6,-13,-3,12,-21,39,82,-8,78,127, 
  /* [17][0][][] */ 7,115,107,-127,25,-53,-7,-77,-78,99,-11,65,-71,-37,125,-55, 
  /* [18][0][][] */ -91,5,-91,-107,127,93,-43,-86,47,82,113,79,-10,103,-59,-22, 
  /* [19][0][][] */ 50,127,74,67,50,-19,-3,-10,-15,113,24,115,50,63,-51,24, 
  /* [20][0][][] */ 108,9,12,54,-72,-19,-34,37,-40,-52,-127,-55,91,-62,24,2, 
  /* [21][0][][] */ -104,-82,-14,108,-23,-11,-127,57,8,3,28,30,-41,21,-75,6, 
  /* [22][0][][] */ -13,-4,-63,-42,127,10,-40,59,62,75,54,64,-23,32,-18,43, 
  /* [23][0][][] */ -56,33,-27,16,8,66,93,76,-9,127,-37,-23,-9,32,-50,-46, 
  /* [24][0][][] */ 40,-89,46,3,127,36,66,-27,65,20,54,31,-76,25,-1,-18, 
  /* [25][0][][] */ 112,-56,79,30,2,-7,-22,89,108,-26,-38,0,127,-48,98,55, 
  /* [26][0][][] */ 71,44,104,106,73,-14,-70,-26,6,78,13,127,20,-75,30,-68, 
  /* [27][0][][] */ -44,36,-77,15,-14,110,26,-81,45,-69,113,12,21,-34,127,85, 
  /* [28][0][][] */ -33,37,-77,-127,30,-70,-5,-51,-90,85,-62,34,-19,27,-31,62, 
  /* [29][0][][] */ 79,83,-69,40,36,75,-43,-18,44,50,1,59,-127,19,-22,69, 
  /* [30][0][][] */ -40,69,-97,-56,74,-36,16,24,-49,49,-47,-11,17,44,-20,127, 
  /* [31][0][][] */ 16,-110,71,48,63,-56,-75,45,-22,-1,22,-31,-74,62,35,127, 
  /* [32][0][][] */ -55,58,0,38,-98,59,8,68,18,-127,34,-87,29,48,38,45, 
  /* [33][0][][] */ -65,-2,57,69,-3,13,-50,19,-43,-43,8,-11,3,-6,6,127, 
  /* [34][0][][] */ -23,3,-81,-87,61,-14,-11,70,17,-2,1,-13,-53,-17,-31,127, 
  /* [35][0][][] */ 64,-10,32,-8,-2,21,-86,-15,-23,-127,-47,17,-7,-20,56,-22, 
  /* [36][0][][] */ -4,27,-112,-18,23,127,-15,41,-34,14,63,32,9,25,-68,49, 
  /* [37][0][][] */ 67,27,72,-45,73,-127,57,-22,-107,49,-110,-22,22,26,119,31, 
  /* [38][0][][] */ -46,127,38,-49,33,13,74,-79,-1,8,-94,27,-39,-75,-90,26, 
  /* [39][0][][] */ 86,42,-127,-112,-17,-21,20,-58,5,-15,2,-34,60,18,-115,-69, 
  /* [40][0][][] */ -38,18,-83,-88,-47,-10,25,-127,-3,-11,2,-33,35,79,43,61, 
  /* [41][0][][] */ -36,-87,-10,127,1,-13,-60,-8,-2,-44,66,-61,-70,-6,1,23, 
  /* [42][0][][] */ -20,63,-11,-127,22,7,12,-31,44,2,-35,6,66,-16,-14,21, 
  /* [43][0][][] */ -5,37,10,20,127,15,26,22,10,44,-1,-87,-110,-48,-18,-6, 
  /* [44][0][][] */ 72,-14,21,36,-31,-12,11,31,23,-41,29,5,127,8,-54,-26, 
  /* [45][0][][] */ 12,-83,-67,35,-44,-88,12,40,26,-22,13,23,-83,127,42,-34, 
  /* [46][0][][] */ -20,-81,49,61,-1,-5,-95,54,25,-57,54,-25,37,79,73,127, 
  /* [47][0][][] */ -31,-52,13,68,7,4,57,11,12,-57,-127,-30,41,-28,-57,10, 
  /* [48][0][][] */ -78,94,-9,-28,-1,55,-11,-117,32,-23,44,-53,53,-127,-46,2, 
  /* [49][0][][] */ -57,10,40,-37,-3,8,127,121,-37,-35,-4,26,-38,39,-45,30, 
  /* [50][0][][] */ 51,12,-77,22,48,-127,-50,-2,-67,44,-39,9,13,-80,-124,-44, 
  /* [51][0][][] */ -43,53,-19,100,-28,47,-23,-80,-29,-75,9,-62,-5,36,1,127, 
  /* [52][0][][] */ -127,5,26,-8,25,41,66,-1,9,-78,-48,-45,-113,-54,-122,-14, 
  /* [53][0][][] */ -44,-74,-60,-127,-43,-1,10,78,39,-68,-47,28,-29,27,60,95, 
  /* [54][0][][] */ 19,-42,3,-19,-66,54,53,-26,-23,-96,47,29,-14,-18,-127,37, 
  /* [55][0][][] */ -22,-34,-29,39,65,-34,55,95,-66,-53,-127,-27,69,-35,-32,44, 
  /* [56][0][][] */ 67,-37,-39,-23,-120,16,-127,4,-9,-9,-41,10,98,-45,52,18, 
  /* [57][0][][] */ -65,8,31,-42,127,32,72,38,-43,49,-1,-10,-54,78,-116,-24, 
  /* [58][0][][] */ 33,-2,-6,-29,45,-4,-47,-58,57,-127,-76,9,-85,-42,-20,47, 
  /* [59][0][][] */ -65,-44,-16,5,31,80,-127,-43,91,125,-109,24,-38,18,-4,-13, 
  /* [60][0][][] */ 16,-39,-1,8,-127,-48,27,-1,-7,39,-15,42,3,-49,29,41, 
  /* [61][0][][] */ 28,35,-97,-21,-35,-16,-127,-81,-6,19,34,121,55,-61,121,60, 
  /* [62][0][][] */ 54,-7,50,-32,-24,32,54,112,-70,127,35,81,43,33,71,123, 
  /* [63][0][][] */ 27,-127,-9,-15,-67,17,46,-27,-7,-26,-7,-15,-36,123,104,28, 
  /* [64][0][][] */ -8,-8,-127,-45,24,55,31,-21,-7,-110,39,-9,66,-48,-73,107, 
  /* [65][0][][] */ -29,-17,91,70,90,-19,91,97,-65,-7,-127,-91,25,116,-97,-3, 
  /* [66][0][][] */ -40,-127,-10,-105,-69,-125,46,-32,-2,-42,17,85,-67,-46,-73,90, 
  /* [67][0][][] */ -30,-87,-92,-32,-85,127,-16,-126,-89,-28,-43,-98,23,-13,-65,35, 
  /* [68][0][][] */ 127,37,7,-1,-81,22,-75,-45,-87,-114,-32,-4,33,-13,82,-58, 
  /* [69][0][][] */ 47,7,37,-21,-8,-37,-58,28,-3,127,-38,19,-5,36,80,-44, 
  /* [70][0][][] */ 32,-3,-18,64,-116,27,-8,-106,95,127,28,49,47,-64,-11,32, 
  /* [71][0][][] */ 127,-68,68,99,-90,-34,38,-31,109,3,-42,44,71,-72,27,5, 
  /* [72][0][][] */ 1,-49,41,103,59,8,-127,88,86,-2,35,9,-52,-61,-58,77, 
  /* [73][0][][] */ 62,28,52,-113,63,-94,-82,52,-25,127,-41,24,15,-66,28,-40, 
  /* [74][0][][] */ 96,13,38,43,-127,-30,34,-7,-75,-49,3,-36,30,-71,-3,9, 
  /* [75][0][][] */ 77,127,-116,10,67,68,-13,-27,-13,-32,47,75,-112,58,57,73, 
  /* [76][0][][] */ -63,-28,8,-45,-57,-14,82,-6,-67,25,91,40,-42,-127,-24,90, 
  /* [77][0][][] */ -38,127,-29,-2,-61,-66,39,66,33,-50,-21,62,-9,55,-2,62, 
  /* [78][0][][] */ 127,49,-60,34,-74,44,-127,-19,0,-3,-79,20,19,-98,41,52, 
  /* [79][0][][] */ -63,-22,127,47,-13,-80,-42,-60,-19,33,18,3,-57,111,-60,78, 
  /* [80][0][][] */ 56,92,33,-127,-5,27,82,-29,17,26,-43,16,79,-55,2,-9, 
  /* [81][0][][] */ 44,-55,12,-127,87,47,-13,114,109,41,-31,-49,-25,22,-96,-84, 
  /* [82][0][][] */ 71,47,87,-12,127,-107,41,43,-4,100,-18,10,-10,-46,25,-86, 
  /* [83][0][][] */ -52,89,17,14,79,55,118,127,-12,58,-10,-74,-79,95,-62,-103, 
  /* [84][0][][] */ -6,-103,3,95,15,-86,-90,43,-75,53,-69,-15,-127,53,-20,-53, 
  /* [85][0][][] */ -104,55,-36,-23,-19,-47,-39,-37,-10,34,20,-79,-127,-97,-74,47, 
  /* [86][0][][] */ -24,50,90,127,31,-28,62,16,4,13,-55,-69,26,77,-112,-60, 
  /* [87][0][][] */ -17,42,127,-26,-95,-28,17,12,39,-24,13,44,-54,18,-3,-7, 
  /* [88][0][][] */ -24,-83,-117,17,43,32,1,15,-10,-85,-123,-108,127,-25,1,39, 
  /* [89][0][][] */ 33,24,13,-127,5,-67,-46,52,121,-13,36,-102,12,-29,58,-66, 
  /* [90][0][][] */ -3,67,27,3,-31,26,34,113,0,-59,-5,127,54,12,-51,83, 
  /* [91][0][][] */ -66,0,-15,79,64,39,-40,-99,-50,38,7,17,-96,-127,-60,-2, 
  /* [92][0][][] */ -38,69,15,-30,-127,-15,-61,38,-35,63,101,55,-5,-31,45,25, 
  /* [93][0][][] */ 116,37,95,49,-127,-86,20,15,-23,-81,-21,-71,18,-55,-15,-10, 
  /* [94][0][][] */ -25,-127,19,-102,12,33,-23,5,76,-22,0,57,12,61,-40,36, 
  /* [95][0][][] */ -38,-71,-26,-70,126,117,-43,48,99,42,-75,64,-30,127,-87,42, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0015204960945993662, 0.0018826071172952652, 0.0022091008722782135, 0.0023771252017468214, 0.0022053653374314308, 0.0010813073022291064, 0.001417685067281127, 0.0025504569057375193, 0.0020762493368238211, 0.0012093281839042902, 0.002426645252853632, 0.0016709676710888743, 0.0021664160303771496, 0.001678873784840107, 0.0030012531206011772, 0.0019623551052063704, 0.0026415945030748844, 0.0012871380895376205, 0.001779316458851099, 0.0023048757575452328, 0.0018039287533611059, 0.0010307827033102512, 0.0010026482632383704, 0.0021974656265228987, 0.0023095938377082348, 0.0021657182369381189, 0.0010836340952664614, 0.0017679401207715273, 0.0026116499211639166, 0.0020432095043361187, 0.0015845794696360826, 0.0017832583980634809, 0.0013457436580210924, 0.002476835623383522, 0.0023578333202749491, 0.002216557739302516, 0.0023009094875305891, 0.0017017197096720338, 0.0025054500438272953, 0.0017734654247760773, 0.0023404548410326242, 0.0028705112636089325, 0.0033665958326309919, 0.0026720711030066013, 0.0030620757024735212, 0.0026531945914030075, 0.001627545221708715, 0.0021838773973286152, 0.0022354156244546175, 0.00304231490008533, 0.0013725454919040203, 0.0022570372093468904, 0.0022537729237228632, 0.0026466334238648415, 0.0023212719243019819, 0.002327583497390151, 0.0023920242674648762, 0.0019992676097899675, 0.0015347221633419394, 0.0019732264336198568, 0.0034013504628092051, 0.0017032903851941228, 0.0018563074991106987, 0.0020851569715887308, 0.0017654015682637691, 0.0011568409390747547, 0.0017598551930859685, 0.001834747614338994, 0.0013856793520972133, 0.002646138658747077, 0.0015934610273689032, 0.0019878102466464043, 0.0016245796578004956, 0.0015905089676380157, 0.0018027565674856305, 0.001454188721254468, 0.0028842289466410875, 0.0031259928364306688, 0.0022719225380569696, 0.0019846160430461168, 0.0021996621508151293, 0.0016911177663132548, 0.0013145511038601398, 0.0018497155979275703, 0.001787689863704145, 0.0020359684713184834, 0.0024400404654443264, 0.0041101234965026379, 0.00073835265357047319, 0.0022836297284811735, 0.0038176823873072863, 0.0027071535587310791, 0.001155186677351594, 0.0017534716753289104, 0.0030955246184021235, 0.0017310077091678977, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -26721, -5076, 3772, -10111, 10279, -14199, 28937, -7140, 10272, -8012, 14189, 14121, -781, -29590, -405, 6405, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.9466448116581887e-05, 6.2241946579888463e-05, 6.969035166548565e-05, 5.9033194702351466e-05, 9.8169017292093486e-05, 0.00013349279470276088, 4.5265103835845366e-05, 6.8983987148385495e-05, 0.00011452542821643874, 9.8654745670501143e-05, 0.00011352232831995934, 7.4149364081677049e-05, 9.0609384642448276e-05, 8.1627251347526908e-05, 5.6507655244786292e-05, 6.6673484980128706e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 16,28,8,10,-10,-69,-7,2,-18,-75,5,-3,50,-62,50,36,-76,-31,40,10,82,28,-67,8,-9,64,127,61,10,79,58,-34,9,1,15,-19,30,28,-3,-16,117,19,29,-28,-7,-3,7,-41,29,-34,86,-11,-73,-2,29,35,-8,-41,14,11,-4,31,-60,-19,9,2,61,28,-5,-13,22,23,5,37,9,37,62,-33,49,19,-11,42,23,36,-50,-2,-8,70,10,6,-77,-18,13,18,96,64, 
  /* [1][0][][] */ 22,36,-51,-15,1,-43,98,-74,-64,-35,-57,-46,0,-38,-11,-59,-35,-21,-28,-20,-13,-89,111,-32,-2,13,4,61,-51,6,-38,13,-33,29,9,11,-21,55,-64,77,33,13,0,-38,54,-56,-3,34,-88,-1,51,-102,-37,43,68,58,31,26,-65,14,-48,3,-10,-19,31,23,100,13,-38,-127,10,10,22,63,-21,37,-52,-30,97,-32,35,-8,54,-59,-27,-53,-24,10,-23,-43,27,-3,67,-57,-33,56, 
  /* [2][0][][] */ 16,-17,12,-9,67,41,-50,18,-52,42,10,-28,36,-6,21,26,22,-21,-127,-16,-13,-50,-18,27,2,-11,-45,21,-32,-21,-20,68,-23,-34,-9,11,-41,18,-24,-15,61,10,7,42,8,51,1,-1,-82,4,-18,20,-24,41,15,-55,25,17,46,32,-25,-17,-20,54,33,-7,-34,-1,2,-8,-20,-29,14,47,23,62,-58,-4,-27,-37,27,29,61,-20,-14,-42,-13,-47,-11,-33,-15,64,2,-16,86,-37, 
  /* [3][0][][] */ 48,-46,-23,-111,-2,-25,106,-33,22,127,-90,-30,8,-32,-17,62,58,39,-31,14,-45,20,15,14,-49,77,49,1,-34,-23,-74,72,-6,-15,33,-32,5,-64,-26,70,3,5,-23,20,57,-54,-8,35,48,-35,31,-42,98,34,25,-6,-9,-29,-15,-51,-34,31,65,-2,-31,-25,114,-45,-29,-10,-62,35,15,-74,-4,-77,11,-47,122,-10,-15,-61,-34,-57,-41,-55,80,72,-36,46,-67,9,-4,-91,-15,36, 
  /* [4][0][][] */ -40,76,43,15,-21,10,-37,-11,20,-38,12,-9,21,43,-18,23,-6,-33,-15,-66,31,-32,-56,14,-20,-38,-16,10,-47,127,-47,-12,11,-43,6,-25,67,49,-37,-8,22,16,17,-41,-49,-4,58,-22,18,-13,-67,-12,-57,33,48,26,9,62,-12,20,-35,-65,-19,8,59,32,-61,-9,-8,6,19,-76,-4,58,61,64,-28,14,-56,44,24,68,15,-56,48,-57,-35,-63,-48,-41,-56,-22,7,20,26,-31, 
  /* [5][0][][] */ -13,-12,43,-22,-16,-18,-17,5,37,5,-14,0,-23,-29,21,-15,-9,2,-55,-31,-22,17,-17,13,19,-47,65,-22,-8,40,9,75,-1,-82,22,14,-35,-25,-30,0,-45,1,-25,9,1,19,-71,21,-18,16,46,-18,31,-69,2,16,-19,-51,5,-38,43,25,28,48,-37,10,108,-23,-12,-17,15,14,0,23,32,10,-1,-13,127,42,-20,-10,-31,31,38,59,6,90,-2,-27,-4,13,10,-7,-35,18, 
  /* [6][0][][] */ 38,-73,74,19,-41,127,-54,-124,-30,-85,-104,64,21,3,-44,96,7,36,11,-46,-92,-28,-105,-66,1,-56,-20,88,-127,49,-23,-38,41,98,-17,-10,-8,-52,22,-14,-71,30,40,-31,17,56,-114,-16,58,7,-84,-122,88,6,-43,-30,38,-38,27,-21,-17,-52,39,-3,53,-97,-80,-67,-97,4,-22,-79,-40,-116,17,-124,87,18,-95,42,-44,84,36,-117,63,-60,-13,-11,-70,84,-96,100,56,-68,85,-108, 
  /* [7][0][][] */ 0,-13,-61,60,-18,-1,28,-12,-94,3,72,52,8,-56,-2,-40,-15,-5,5,-3,-56,-26,-43,-31,65,47,-12,68,4,24,15,19,-55,-127,22,92,-12,10,-43,12,-14,-16,2,-65,23,49,65,77,-18,44,-37,8,24,-33,40,-54,-12,31,-76,-15,56,10,6,-31,67,-53,101,-17,-49,-34,59,11,-16,-25,-74,-24,23,-38,89,-37,-6,-17,-56,-36,39,18,-76,39,-6,14,-1,26,67,-16,85,-6, 
  /* [8][0][][] */ -21,-58,9,2,-10,-4,24,5,-10,-9,54,46,10,32,-40,-6,73,1,16,6,-12,-65,-31,-24,-25,-40,75,-2,-25,52,10,-27,-9,5,8,7,-43,-13,11,-34,5,44,31,-40,15,-12,29,-17,31,-1,49,-4,-3,8,-42,6,-11,107,-53,-8,-11,-57,-57,-10,-88,-28,-17,19,-17,22,47,-22,-32,-127,46,-98,17,10,-54,20,-25,-3,-10,64,67,-61,-45,57,-44,87,13,-24,-55,11,-8,-57, 
  /* [9][0][][] */ -22,-28,-30,25,4,19,7,33,-47,0,60,52,-25,49,24,-49,-19,32,-21,-47,4,38,-8,10,-22,28,3,19,36,-12,14,-7,-19,-20,1,48,-23,-11,20,5,-15,-29,12,9,11,40,-1,39,-43,7,-12,34,126,17,-8,-3,10,-18,28,18,-31,-2,77,9,9,17,62,2,36,-6,-25,25,5,-127,-41,-127,-36,-10,37,-5,-9,29,6,-45,38,13,-51,-4,1,108,35,28,57,31,-9,35, 
  /* [10][0][][] */ 29,38,7,3,-17,12,-44,-28,59,12,-38,18,20,7,-4,-57,-34,-6,16,-5,23,-18,-22,-27,8,-15,-95,45,-16,46,-6,9,14,22,-18,4,12,-1,1,6,35,-13,54,-39,-33,-4,15,26,19,1,15,-17,-20,-17,1,30,-11,6,-18,-3,-14,-38,-8,8,-5,-19,-86,-25,-43,-23,39,-14,-23,27,29,13,43,-15,-92,8,-14,27,8,-8,3,6,-65,-127,-18,24,8,22,50,-37,22,25, 
  /* [11][0][][] */ 26,-40,-2,10,-55,32,5,2,64,-20,-23,-42,26,7,9,-11,-34,42,29,-69,0,26,15,-21,31,14,66,4,33,-62,-31,10,16,96,-100,-1,10,-16,51,15,-51,44,-21,20,-45,-2,-12,-11,47,-19,-19,-11,-26,10,-79,92,-33,2,-10,-25,24,-2,-13,-65,-10,-53,-127,-76,3,-41,-93,35,48,19,-6,1,32,54,-110,-37,-14,-4,-6,-6,-23,-4,56,75,25,-48,7,5,-35,18,83,28, 
  /* [12][0][][] */ 29,26,-43,-23,22,-28,-4,25,47,-31,14,-3,-1,-15,-4,14,2,-49,-27,5,3,46,1,52,-37,-39,-127,-3,79,-29,21,-8,-23,-75,61,-12,31,-15,-2,25,-11,-61,12,37,37,-7,16,-15,-66,-3,-43,101,64,-19,25,-70,4,20,-44,-25,9,44,66,14,-16,-22,27,30,113,17,14,27,0,-15,-15,-10,-38,-49,37,-63,17,-50,43,-42,-1,7,13,-106,-1,26,-38,23,18,57,15,37, 
  /* [13][0][][] */ -22,22,-62,25,15,10,-5,9,27,53,-24,36,-42,-20,61,-47,10,53,56,10,-23,-44,-1,12,43,46,-19,24,0,34,46,-13,-16,58,-5,48,17,-35,-51,-54,1,-10,17,13,45,45,-31,45,-45,36,-5,6,-11,-34,63,37,18,-37,-9,-11,15,22,1,-28,12,85,127,37,19,-2,-38,-13,34,51,-72,49,18,-61,122,-36,-11,-32,20,3,24,61,-34,-20,-16,-23,5,39,43,18,57,50, 
  /* [14][0][][] */ -23,56,23,17,-62,-45,25,46,-74,-35,69,10,-84,-9,67,-15,-45,39,-55,30,-25,23,-101,8,-51,3,-51,-123,13,6,32,83,-54,34,24,-19,-25,-69,-12,-52,29,-31,55,-26,-11,53,-77,25,-12,-39,85,25,-17,28,-36,32,-61,25,9,41,36,63,-9,39,16,-47,8,-64,35,71,84,31,-59,39,15,14,36,-14,43,19,-69,122,-12,-127,90,-14,1,18,-118,-17,-14,-8,-29,21,34,33, 
  /* [15][0][][] */ 87,-32,19,34,36,-1,-20,-18,18,40,-56,-16,72,73,-3,-24,-15,7,-79,48,0,-40,12,33,68,-33,83,34,54,-36,-49,60,61,50,-11,-80,63,69,67,59,85,32,-19,13,-43,-124,33,-33,-34,-20,-14,3,-14,-59,-28,50,-14,6,-21,28,-2,-59,-43,37,38,41,-79,40,1,-46,-14,-3,-4,-118,-50,-105,-26,22,-127,31,77,-36,63,26,-56,6,-3,-27,43,83,14,-64,-27,-44,41,-38, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0038554409984499216, 0.0026822364889085293, 0.0030032158829271793, 0.0025439593009650707, 0.0042304671369493008, 0.0057526999153196812, 0.0019506412791088223, 0.0029727758374065161, 0.0049353255890309811, 0.004251399077475071, 0.0048920982517302036, 0.0031953710131347179, 0.0039046944584697485, 0.0035176211968064308, 0.0024351244792342186, 0.0028732079081237316, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 12820, 1296, -5875, 8197, -2459, 1665, 1199, -584, 3715, -3585, -115, -4057, 8909, -2649, -2994, -6524, 920, 833, -10926, -761, -3093, 2448, -5876, 430, 27, 9058, -10125, -6910, -2882, -3551, 972, -1799, 17366, -245, -1447, -170, 1008, 14166, 3299, 11757, -673, 6886, 161, 4004, 2218, -157, 7320, 3421, -4839, -128, -3634, 2816, 697, -3362, -1761, 1999, 845, 1864, 1114, 2764, -859, 2212, -626, 9522, 9651, -275, 13838, 13385, -1078, -652, 10440, -616, -31, 937, -3637, -139, 21885, 8285, 11725, 10010, 17779, -2271, 13631, 10778, -822, -1002, 10977, -7587, 12435, 661, -6735, -3729, -1454, 1613, 23477, -1778, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00010121962986886501, 0.00028252761694602668, 0.00017891268362291157, 0.00015132402768358588, 0.00015823224384803325, 0.00047101016389206052, 9.4343791715800762e-05, 0.00018360705871600658, 0.00029043797985650599, 0.00027639983454719186, 0.00024250133719760925, 0.00016597735520917922, 0.00012647693802136928, 0.00016940894420258701, 0.00021421186102088541, 0.00019471584528218955, 0.00024703287635929883, 0.0002680745383258909, 0.00011083330900873989, 0.00026676437119022012, 0.0002334575547138229, 0.00022244192950893193, 0.00013334715913515538, 0.00017090069013647735, 0.0023889143485575914, 0.00014781646314077079, 0.00021546990319620818, 0.00013829419913236052, 0.00032052519964054227, 0.00016909303667489439, 0.00016820689779706299, 0.00023604539455845952, 6.664484681095928e-05, 0.00040028226794674993, 0.00012950263044331223, 0.0001504359970567748, 0.00032515483326278627, 9.5780138508416712e-05, 0.00021051785734016448, 0.00013268330076243728, 0.00052286189747974277, 0.00018489148351363838, 0.00021741091040894389, 0.00015889950736891478, 0.00013126117119099945, 0.00026919151423498988, 0.00018504234321881086, 0.00021424218721222132, 0.00020890063024125993, 0.00031675273203290999, 0.00023247352510225028, 0.00019872031407430768, 0.00012525847705546767, 0.00027037828112952411, 0.00024610196123830974, 0.00022753035591449589, 0.00014799307973589748, 0.00036745358374901116, 0.00034777240944094956, 0.00028798746643587947, 0.00023423010134138167, 0.0002531267236918211, 0.00013357387797441334, 0.00010241206473438069, 0.00027114705881103873, 0.00043884760816581547, 0.00011391196312615648, 0.00010865978401852772, 0.00026033454923890531, 0.00031282563577406108, 0.00015579821774736047, 0.00029807002283632755, 0.00036841846304014325, 0.00015929422806948423, 0.00014939518587198108, 0.00018422312859911472, 5.7928602473111823e-05, 0.00016502941434737295, 0.00011162536247866228, 0.00014358269982039928, 6.216520705493167e-05, 0.00024218653561547399, 8.4191065980121493e-05, 0.00025984723470173776, 8.7566484580747783e-05, 0.00033512755180709064, 0.00013230253534857184, 0.00020116708765272051, 0.00010787260544020683, 0.00017725037469062954, 0.00014478093362413347, 0.00021201044728513807, 0.00027898899861611426, 0.0001521374360891059, 8.5509440395981073e-05, 0.00030667247483506799, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -71,-17,-1,-28,109,-3,23,-19,-6,-7,-13,-13,-44,-3,-3,-10,-22,1,-6,-9,1,22,-6,42,-4,-14,-27,5,23,15,21,9,-15,4,2,-29,-8,-50,-41,-14,4,-23,39,-22,-35,34,-59,-28,-17,3,-8,48,-76,-1,37,-6,-12,-6,4,-21,-5,-20,-1,-43,-19,-22,-45,-48,-4,27,-12,-8,30,1,-5,-1,-31,22,127,-46,-127,18,-120,-29,-21,-23,17,26,-34,-10,2,-23,-2,40,-43,10, -38,32,41,-76,-34,1,127,-50,-6,-23,-35,12,-76,5,-82,69,-11,69,80,-22,-10,127,62,127,22,-10,53,88,127,46,127,-22,-127,-16,-89,-39,-23,-100,127,-33,-23,-127,-12,-25,59,-35,-36,-13,46,1,25,127,-103,40,-77,0,-89,-6,-7,19,-5,-127,-120,-73,-46,-6,-5,-88,-2,27,-65,106,-127,-13,10,-26,-127,-60,-8,-127,-118,7,27,-67,127,77,-62,36,-127,3,21,-6,13,122,-84,-84, -67,-7,-18,-29,66,-5,41,-29,-24,2,-13,9,-14,-2,-2,-27,-16,-4,-11,-18,-7,3,14,23,-10,-15,11,-10,12,2,16,16,-10,3,-11,64,-10,-59,-39,-3,-3,-19,19,-11,-21,-28,-55,-32,-19,-4,-7,30,7,-3,10,-5,48,-12,5,-33,-6,-10,-52,-36,-35,-36,127,-28,0,24,7,4,9,3,-1,16,-28,29,-41,-36,-81,4,-115,-31,16,-31,7,-22,-46,-39,11,52,8,26,-58,14, 
  /* [0][1][][] */ -83,-10,40,-52,54,88,-44,-23,-6,-9,-25,-9,-127,14,20,70,-19,36,106,23,35,-28,88,-27,40,9,64,19,-6,0,-15,-14,-125,-13,65,-18,-15,-127,-54,-127,-18,-4,88,-30,-86,127,-69,-90,49,63,13,-54,-127,73,67,-23,22,-28,32,-17,14,-13,92,-74,-34,18,-27,-81,-7,-5,-127,13,80,127,11,-72,-114,-58,-61,-29,-96,2,-44,-60,40,21,-108,66,-76,127,88,-71,127,7,-57,-2, 104,127,127,127,-127,-127,86,-64,127,127,-71,-57,-69,127,-22,127,127,-127,127,127,127,-96,98,-127,-127,-127,127,127,-107,127,-22,127,-75,127,127,-112,127,99,14,-22,127,3,-127,-94,127,-21,127,127,127,-127,127,-126,114,127,-127,127,-127,127,-127,127,-95,111,105,-127,127,127,-12,127,-107,-127,-23,-127,19,118,127,80,10,-127,91,-108,48,127,127,127,106,67,-127,127,-90,48,-16,-15,-82,-34,-127,-29, -127,-39,43,-83,16,45,-56,-4,-42,-10,-3,127,-94,13,26,51,-25,46,64,7,23,-32,60,-25,37,3,44,3,-1,-13,9,-10,-80,-28,71,127,-10,-100,-76,-85,-25,-37,24,-26,-79,-63,-69,-119,36,72,-3,-36,120,19,95,-38,83,-25,46,-52,2,-36,-127,-36,-74,-9,-51,-84,-19,5,-102,0,39,-96,15,127,-77,-40,-56,33,-117,-12,-94,-82,8,23,-88,40,-41,-88,127,127,-35,-28,-80,-3, 
  /* [0][2][][] */ -55,-46,-9,-13,41,-1,0,15,-13,16,33,-18,73,-7,-6,-21,-5,-11,-48,-27,-5,-19,14,-28,5,-21,-17,14,12,2,-24,10,11,0,-8,-23,-7,-41,-18,-16,-26,-7,28,7,19,13,-35,5,-37,4,-18,-26,-6,-30,40,-21,17,-19,4,-22,3,7,12,-8,-33,-15,114,10,24,24,-13,-5,-3,-17,-12,-26,1,25,-30,-1,-41,14,-110,-18,-22,-6,40,-7,-11,4,-7,-9,-12,-18,-25,-5, -48,-69,29,-108,-36,-5,42,127,-61,71,127,-22,-38,12,127,66,-12,-37,79,-53,-27,-42,127,7,18,-7,24,27,1,13,-92,-36,-60,-28,-107,-13,-90,-127,34,-56,-24,-80,-34,127,20,-24,-48,-6,12,-7,-4,-11,69,32,-44,-41,-38,-53,41,-62,127,15,102,-1,-86,-49,-22,-57,127,32,-37,13,23,-27,17,-25,-36,-29,1,87,-114,-18,-114,-65,37,-127,-7,7,-34,4,29,9,15,-127,-76,127, -44,-2,4,-9,32,-15,1,15,-25,7,18,50,85,-5,-6,-42,-8,8,-23,-32,-12,-11,26,-17,-4,-12,-22,3,6,3,-36,10,21,3,-9,-4,-6,-54,-30,-21,-29,-3,4,13,12,-4,-35,7,-34,-2,-12,-28,-2,-28,33,-15,57,-12,9,-29,1,10,-7,-3,-26,-20,-24,24,16,15,-9,0,-45,-36,-6,-14,-29,16,99,24,-63,-1,-73,0,8,-2,49,-6,-11,0,-18,26,6,-25,-10,-7, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0048474818468093872, 0.01353045366704464, 0.0085682589560747147, 0.0072470181621611118, 0.0075778570026159286, 0.02255702018737793, 0.0045181927271187305, 0.0087930755689740181, 0.013909286819398403, 0.013236989267170429, 0.011613565497100353, 0.0079487767070531845, 0.0060570724308490753, 0.0081131178885698318, 0.010258762165904045, 0.0093250833451747894, 0.011830584146082401, 0.01283828541636467, 0.0053078876808285713, 0.012775539420545101, 0.011180452071130276, 0.010652906261384487, 0.0063860923983156681, 0.0081845587119460106, 0.11440684646368027, 0.0070790378376841545, 0.010319010354578495, 0.0066230096854269505, 0.015350185334682465, 0.0080979885533452034, 0.0080555509775876999, 0.011304385960102081, 0.0031916701700538397, 0.01916980929672718, 0.0062019755132496357, 0.007204489316791296, 0.015571901574730873, 0.0045869806781411171, 0.010081853717565536, 0.0063542998395860195, 0.025040237233042717, 0.0088545875623822212, 0.010411966592073441, 0.0076098130084574223, 0.0062861931510269642, 0.012891777791082859, 0.0088618127629160881, 0.010260214097797871, 0.010004403069615364, 0.015169518999755383, 0.011133326217532158, 0.0095168603584170341, 0.0059987194836139679, 0.012948612682521343, 0.011786002665758133, 0.010896594263613224, 0.0070874961093068123, 0.017597619444131851, 0.016655074432492256, 0.013791929930448532, 0.01121744979172945, 0.012122423388063908, 0.0063969502225518227, 0.0049045882187783718, 0.012985429726541042, 0.021016731858253479, 0.0054553267545998096, 0.0052037960849702358, 0.012467611581087112, 0.014981446787714958, 0.0074612898752093315, 0.01427479088306427, 0.017643827944993973, 0.0076287165284156799, 0.0071546444669365883, 0.0088225798681378365, 0.0027742430102080107, 0.0079033784568309784, 0.0053458199836313725, 0.006876280065625906, 0.0029771369881927967, 0.011598489247262478, 0.00403197156265378, 0.012444273568689823, 0.0041936226189136505, 0.016049502417445183, 0.0063360645435750484, 0.009634038433432579, 0.0051660975441336632, 0.0084886495023965836, 0.0069336644373834133, 0.010153334587812424, 0.013360985554754734, 0.0072859725914895535, 0.0040951091796159744, 0.014686767943203449, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1476, 7289, 237, 2089, 4371, 17882, 107, 2378, 15241, -1311, 19692, 4003, 2033, 506, 4801, 340, 3083, 4711, -148, 13063, 1052, 10526, -1360, 2377, -10147, 1700, 3064, 1381, 6708, 1135, 4578, 3696, 1447, 10287, 3301, 4998, 4376, 2061, 4156, 2567, 15463, 1997, 2714, 1357, 3742, 10524, 7121, 11422, 1625, -1025, 2127, 7635, 3204, -3002, 7193, 226, 2444, 13742, 1655, 2204, 2213, 8491, 4240, -262, 20917, 13546, 2458, 4166, 6896, 4991, 2512, 2331, -4211, 5373, 2783, 3957, 340, 11285, 4482, 8440, 2289, 993, 5642, 16573, 151, 11176, 5970, 2213, -836, 3323, 1320, 11619, 2927, 3484, 4636, 6025, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00022424284543376416, 0.00010509582352824509, 0.00029979780083522201, 0.00018947479838971049, 0.00014497744268737733, 5.2372186473803595e-05, 0.0002252635604236275, 0.00014333901344798505, 5.9721867728512734e-05, 0.00015707923739682883, 4.3799274862976745e-05, 0.00011449115845607594, 0.00016547528502997011, 0.00033154635457322001, 0.00011222589091630653, 0.00013639713870361447, 0.00019188408623449504, 0.00013595672498922795, 0.00014395863399840891, 6.6194967075716704e-05, 0.00025039681349880993, 7.5135954830329865e-05, 0.00016918135224841535, 0.0001100193039746955, 7.6068106864113361e-05, 0.000124871134175919, 0.00015722589159850031, 0.00024115786072798073, 0.00012200786295579746, 0.00023026930284686387, 0.00012913534010294825, 0.00014500394172500819, 0.0002683896163944155, 8.2550999650266021e-05, 0.00015296765195671469, 0.00011965812154812738, 0.00013659574324265122, 0.00019334860553499311, 0.00011639637523330748, 0.00015502885798923671, 6.0941827541682869e-05, 0.00014857275527901947, 0.00014179020945448428, 0.0001253055379493162, 0.00010601949179545045, 8.2056511018890887e-05, 9.6987881988752633e-05, 6.6764136136043817e-05, 0.0001783454354153946, 0.00022335154062602669, 0.00019810587400570512, 9.5436269475612789e-05, 0.00014608097262680531, 0.00013930752174928784, 9.9050004791934043e-05, 0.00025078453472815454, 0.00014138425467535853, 6.6416585468687117e-05, 0.00012228758714627475, 0.00013551043230108917, 0.00018952529353555292, 0.0001015414236462675, 0.00014030458987690508, 0.00016425384092144668, 4.5027674786979333e-05, 6.401246355380863e-05, 0.00017359433695673943, 0.00014337566972244531, 0.00011644839105429128, 9.8900869488716125e-05, 0.00020633374515455216, 0.00011443959374446422, 0.00013534398749470711, 0.00012296948989387602, 0.00014183325401972979, 0.00015831063501536846, 0.00018379201355855912, 7.123776595108211e-05, 0.0001285878533963114, 0.00010467578249517828, 0.00017532482161186635, 0.00014732532144989818, 9.4068054750096053e-05, 5.8138593885814771e-05, 0.00011125547462143004, 6.7311142629478127e-05, 0.00012143493950134143, 0.00017745353397913277, 0.00017963210120797157, 0.00017243364709429443, 0.00014896348875481635, 7.2463633841834962e-05, 0.00016561629308853298, 0.00011737585009541363, 0.00012112233525840566, 0.00010859295434784144, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 39,9,17,55,-127,-13,114,64,73,97,-37,48,21,9,45,93, 
  /* [1][0][][] */ -26,21,-77,0,127,88,-9,4,-23,23,-62,28,-47,80,-43,-37, 
  /* [2][0][][] */ -36,69,80,5,58,77,0,37,36,-3,46,-11,49,-127,-2,11, 
  /* [3][0][][] */ 127,-35,30,5,34,29,-22,17,41,39,-67,-31,-47,45,-39,53, 
  /* [4][0][][] */ -90,-4,3,23,-127,2,-84,-43,-6,30,-6,-69,-32,24,-61,124, 
  /* [5][0][][] */ -90,14,36,13,127,37,8,4,-45,32,-25,11,-66,45,-86,-41, 
  /* [6][0][][] */ -127,26,-43,39,-8,-76,80,22,12,-38,-53,43,18,3,-42,8, 
  /* [7][0][][] */ -2,105,58,-99,62,57,127,15,50,-6,4,48,90,27,-39,1, 
  /* [8][0][][] */ -28,-17,-65,48,-54,85,-38,-66,25,-41,76,47,127,46,-93,13, 
  /* [9][0][][] */ -33,-127,-30,73,-46,-63,-22,52,42,43,13,61,-84,8,-8,-26, 
  /* [10][0][][] */ -51,-45,-93,51,-119,127,70,-99,-1,-56,50,-60,30,104,-87,92, 
  /* [11][0][][] */ -41,-119,-68,16,9,117,56,-12,33,20,30,-105,6,127,-127,126, 
  /* [12][0][][] */ -40,-97,-66,111,-93,-127,6,60,69,68,-40,97,1,-55,-15,-4, 
  /* [13][0][][] */ -69,-26,-41,-4,-18,-2,27,21,-20,127,-6,-24,37,29,15,-7, 
  /* [14][0][][] */ -96,-22,-35,-40,-25,75,-25,-101,127,-60,65,3,87,-66,-92,-95, 
  /* [15][0][][] */ -6,-127,92,-49,-56,-36,11,54,6,-54,-88,-46,79,-33,-30,-42, 
  /* [16][0][][] */ -23,-33,22,-37,26,26,-13,-28,49,-127,43,-24,-10,-1,-74,-88, 
  /* [17][0][][] */ -19,8,24,-58,11,-4,-36,-8,81,-55,26,63,93,-82,-35,-127, 
  /* [18][0][][] */ 60,9,-47,-127,-3,-21,122,-51,12,54,0,56,-6,68,-17,-116, 
  /* [19][0][][] */ -26,-17,-39,-83,-127,54,0,-9,32,-53,27,-117,-17,-31,-16,-2, 
  /* [20][0][][] */ 19,58,68,-76,64,-1,-46,94,-103,-127,36,-77,-30,111,-9,-6, 
  /* [21][0][][] */ -9,-115,-127,-8,104,61,102,103,-94,-113,-24,5,125,-119,-52,34, 
  /* [22][0][][] */ 79,-18,74,-25,14,18,77,40,42,126,26,24,-8,3,127,-12, 
  /* [23][0][][] */ -126,-74,-13,73,61,42,8,7,-6,15,0,-99,-1,69,63,127, 
  /* [24][0][][] */ 30,-19,39,46,17,-107,18,-65,27,119,-127,71,-11,-76,86,-83, 
  /* [25][0][][] */ 123,-58,119,116,39,11,-11,42,-127,84,59,-63,-4,20,72,-7, 
  /* [26][0][][] */ -23,28,13,40,-55,119,-14,41,-61,-34,-80,37,2,24,45,-127, 
  /* [27][0][][] */ 38,-6,-4,-50,-55,-4,-94,14,-106,-16,-72,-48,-90,42,-19,127, 
  /* [28][0][][] */ -89,9,33,3,28,-2,-127,1,-4,-42,-3,-26,12,-44,-77,-26, 
  /* [29][0][][] */ -25,-120,-24,99,-37,2,127,14,71,48,-108,60,29,-30,-43,78, 
  /* [30][0][][] */ 38,-76,-81,12,-127,26,45,-20,2,1,4,-15,-18,67,-1,88, 
  /* [31][0][][] */ -127,-4,5,87,-33,5,-48,-4,-30,-48,7,-32,-23,-53,-20,91, 
  /* [32][0][][] */ -127,-71,-96,-9,-90,-47,11,-23,122,59,-56,-59,48,51,29,-14, 
  /* [33][0][][] */ -9,10,-96,34,-127,-98,55,-9,-116,20,-59,-59,-19,100,69,65, 
  /* [34][0][][] */ 36,68,4,39,-70,-57,37,8,14,-127,-29,40,-28,-5,50,94, 
  /* [35][0][][] */ 44,-7,-81,-27,-127,20,101,-29,36,61,-18,-10,20,81,30,69, 
  /* [36][0][][] */ -11,-5,-49,48,127,-20,38,70,-77,24,-80,-66,28,-9,2,22, 
  /* [37][0][][] */ -107,53,-5,-74,49,-83,-38,-35,0,-18,-29,53,63,-80,12,-127, 
  /* [38][0][][] */ 51,127,24,-90,-102,-60,-120,-68,-32,-71,46,73,-82,-108,72,-12, 
  /* [39][0][][] */ 16,-32,10,56,22,72,94,-50,-10,53,7,-10,-2,127,49,100, 
  /* [40][0][][] */ 119,59,69,88,-61,-66,1,23,-85,74,-8,-7,-54,-27,127,-11, 
  /* [41][0][][] */ -27,-20,12,55,-95,116,-9,54,-56,29,-113,4,15,24,46,-127, 
  /* [42][0][][] */ 2,-102,22,-19,127,34,64,18,-27,-102,-87,-28,-20,-11,-7,44, 
  /* [43][0][][] */ -37,-102,-58,7,110,12,-5,110,-76,-80,-111,-70,127,-10,-48,67, 
  /* [44][0][][] */ -38,-55,-68,-82,26,68,68,12,-44,-127,-64,65,-39,56,33,99, 
  /* [45][0][][] */ 6,-58,-60,3,-127,60,-31,-61,56,-40,18,-53,1,4,-27,34, 
  /* [46][0][][] */ 25,-80,-10,-10,96,-79,-9,101,-3,-17,30,74,-53,-50,52,-127, 
  /* [47][0][][] */ -82,-45,-7,88,-3,14,37,52,-1,127,75,95,-34,90,1,121, 
  /* [48][0][][] */ 44,-10,-86,-91,34,-59,15,50,43,-82,2,24,-53,8,-47,-127, 
  /* [49][0][][] */ 54,39,6,28,-16,-26,46,40,-31,127,-32,36,-42,-31,65,82, 
  /* [50][0][][] */ 6,0,11,10,-127,-15,-11,-48,56,19,30,59,-19,-60,18,-1, 
  /* [51][0][][] */ 11,3,-8,-127,-30,97,54,-55,2,6,41,-62,65,78,-38,22, 
  /* [52][0][][] */ 21,-31,-7,-83,84,-118,-15,-28,38,-3,127,-60,34,5,-31,98, 
  /* [53][0][][] */ -51,-61,50,-16,-45,-127,19,-105,-13,87,-91,82,-33,-23,34,-83, 
  /* [54][0][][] */ 74,73,50,-15,-127,-49,-100,-121,0,26,51,76,-84,-46,57,0, 
  /* [55][0][][] */ 18,6,-31,75,-33,22,28,-15,5,127,19,60,-2,1,3,40, 
  /* [56][0][][] */ 43,-109,-80,84,-83,49,0,58,127,4,59,41,-31,-44,41,87, 
  /* [57][0][][] */ 45,11,100,-73,81,-16,-28,8,69,-24,24,127,48,-53,104,-64, 
  /* [58][0][][] */ 74,-64,12,-76,38,19,-4,127,55,104,-7,65,47,20,86,-5, 
  /* [59][0][][] */ -51,35,21,-45,3,-90,-8,4,-1,26,-106,-90,-127,-51,66,-19, 
  /* [60][0][][] */ 40,-25,24,20,12,-20,10,-51,22,127,-4,69,-10,-25,-23,-27, 
  /* [61][0][][] */ 77,69,14,-31,-90,-127,-12,-67,-67,-14,-25,25,-71,-49,90,87, 
  /* [62][0][][] */ -26,79,-43,37,-47,127,-54,36,-53,9,-46,43,-36,50,56,-88, 
  /* [63][0][][] */ 31,-7,-69,-127,-15,-37,80,-19,2,-91,-24,33,-34,73,26,-32, 
  /* [64][0][][] */ -42,20,24,-35,68,-61,37,93,-127,-12,-88,-30,-33,109,59,71, 
  /* [65][0][][] */ -79,-25,-34,-11,81,34,-55,-67,-127,-50,4,-13,-118,122,-52,49, 
  /* [66][0][][] */ -18,61,-13,32,-44,127,-19,26,-66,19,-29,41,-30,51,53,-79, 
  /* [67][0][][] */ 9,-16,-42,-32,6,-83,67,-103,-12,28,8,110,-68,-38,-33,-127, 
  /* [68][0][][] */ 13,-127,-21,63,-5,3,19,81,47,47,53,11,-73,25,-22,-20, 
  /* [69][0][][] */ 26,90,96,-127,62,2,-16,110,44,104,60,103,111,-96,40,-124, 
  /* [70][0][][] */ 50,20,55,-36,101,7,-112,-55,-127,-90,-17,42,-36,60,-105,-17, 
  /* [71][0][][] */ -41,-69,40,-49,59,-22,35,28,-109,87,-127,-69,3,89,-31,54, 
  /* [72][0][][] */ 15,7,66,19,-67,-39,-127,-63,-4,70,-23,66,25,117,-117,-13, 
  /* [73][0][][] */ -6,-45,-17,-34,47,-105,27,-40,74,82,100,-7,26,-9,-63,127, 
  /* [74][0][][] */ 8,0,-36,93,-84,-8,92,37,69,59,42,127,122,23,-46,15, 
  /* [75][0][][] */ -32,37,-29,37,-51,127,-18,25,-36,26,-34,47,-15,52,31,-63, 
  /* [76][0][][] */ -73,103,-52,63,-127,-10,-20,22,61,59,-38,-42,53,-55,-120,44, 
  /* [77][0][][] */ 101,113,-121,127,67,69,67,52,36,3,108,-44,72,27,60,31, 
  /* [78][0][][] */ 16,-39,0,-59,66,-118,33,-50,49,42,127,-21,7,-18,-38,124, 
  /* [79][0][][] */ -44,61,-2,15,2,-45,-37,-10,-127,-3,41,5,100,40,-88,-49, 
  /* [80][0][][] */ -75,28,63,-9,58,45,9,-127,-81,53,-55,-36,-11,-76,30,64, 
  /* [81][0][][] */ 82,82,-24,2,31,-24,90,110,-111,119,-62,-41,-39,31,112,127, 
  /* [82][0][][] */ 68,127,-37,-65,-11,-60,111,-95,31,30,-64,84,127,-17,74,-47, 
  /* [83][0][][] */ 0,-46,23,32,-1,22,-41,-99,61,-36,87,7,27,-73,-48,-127, 
  /* [84][0][][] */ -126,-75,-66,-31,-15,107,113,9,90,75,124,127,54,94,-83,9, 
  /* [85][0][][] */ 103,1,98,-84,82,-6,-25,77,13,127,-69,-3,-45,58,107,19, 
  /* [86][0][][] */ -79,71,-36,-1,24,77,16,16,84,34,127,-26,-27,54,-16,-20, 
  /* [87][0][][] */ 11,-59,29,-46,48,-127,31,-32,48,-11,65,-37,36,-40,-37,76, 
  /* [88][0][][] */ -76,76,33,-2,116,-35,53,26,-60,-79,108,-71,83,122,117,-127, 
  /* [89][0][][] */ -27,40,-20,27,-37,127,-16,36,-49,7,-39,19,-10,54,27,-83, 
  /* [90][0][][] */ 70,-75,21,15,127,3,54,31,4,-101,-118,-17,-2,-12,-64,21, 
  /* [91][0][][] */ -12,64,-24,-30,1,-82,-92,27,-88,23,-105,-127,-121,-76,9,22, 
  /* [92][0][][] */ 70,51,51,27,-127,-85,22,1,-19,28,-24,-25,-26,-76,18,-4, 
  /* [93][0][][] */ -5,-127,-105,65,-42,-56,-23,111,99,84,7,79,-73,63,-11,-36, 
  /* [94][0][][] */ 91,12,127,-28,26,-29,19,35,25,79,3,59,19,9,115,-3, 
  /* [95][0][][] */ -54,-53,-22,-13,127,-11,31,88,-25,-12,-92,-46,15,9,-58,27, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0044859196059405804, 0.0021024146117269993, 0.0059973769821226597, 0.0037903939373791218, 0.0029002358205616474, 0.0010476919123902917, 0.0045063388533890247, 0.0028674595523625612, 0.0011947203893214464, 0.0031423291657119989, 0.00087619310943409801, 0.0022903657518327236, 0.0033102899324148893, 0.0066324984654784203, 0.0022450496908277273, 0.0027285891119390726, 0.0038385912775993347, 0.0027197788003832102, 0.0028798549901694059, 0.0013242129934951663, 0.0050091231241822243, 0.0015030752401798964, 0.0033844287972897291, 0.0022009075619280338, 0.0015217226464301348, 0.0024980143643915653, 0.0031452630646526814, 0.0048243002966046333, 0.0024407354649156332, 0.0046064774505794048, 0.0025833188556134701, 0.0029007659759372473, 0.0053690643981099129, 0.0016514111775904894, 0.003060078015550971, 0.0023937295190989971, 0.0027325623668730259, 0.0038678883574903011, 0.0023284791968762875, 0.003101311856880784, 0.0012191253481432796, 0.0029721593018621206, 0.0028364763129502535, 0.002506704768165946, 0.002120892284438014, 0.0016415191348642111, 0.0019402173347771168, 0.0013355991104617715, 0.0035677538253366947, 0.004468089435249567, 0.0039630564860999584, 0.0019091777503490448, 0.0029223116580396891, 0.0027868107426911592, 0.0019814695697277784, 0.005016879178583622, 0.0028283551800996065, 0.0013286464381963015, 0.0024463313166052103, 0.0027108509093523026, 0.0037914041895419359, 0.0020313097629696131, 0.002806756878271699, 0.0032858552876859903, 0.00090076687047258019, 0.0012805525911971927, 0.0034727093297988176, 0.0028681929688900709, 0.0023295197170227766, 0.0019784860778599977, 0.0041276528500020504, 0.002289334312081337, 0.0027075211983174086, 0.0024599726311862469, 0.0028373373206704855, 0.003166962880641222, 0.0036767113488167524, 0.0014250929234549403, 0.0025723665021359921, 0.0020940117537975311, 0.0035073272883892059, 0.0029472047463059425, 0.0018818068783730268, 0.0011630473891273141, 0.002225636737421155, 0.0013465419178828597, 0.0024292743764817715, 0.003549911780282855, 0.0035934934858232737, 0.0034494900610297918, 0.0029799758922308683, 0.0014496161602437496, 0.0033131109084933996, 0.0023480732925236225, 0.0024230207782238722, 0.0021723737008869648, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -6133, 10630, -19842, 2334, 12379, -16058, -42958, -9658, -7775, 9958, -16517, -13433, 7946, -11657, -4551, -1909, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00013579380174633116, 0.00014741149789188057, 0.000172677609953098, 0.00018048977653961629, 9.5128998509608209e-05, 0.00014873308828100562, 9.6100069640669972e-05, 0.00010536216723266989, 0.00010345246118959039, 9.9690238130278885e-05, 0.0001693485100986436, 0.00015884620370343328, 0.00012653779413085431, 7.2151698986999691e-05, 0.00014573959924746305, 0.0001242344151251018, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 27,37,23,-31,71,69,-37,56,-17,114,8,50,-33,35,-12,49,35,86,45,-69,-68,83,-13,49,57,50,36,53,-47,-46,-7,91,-27,8,-75,52,59,-127,-34,12,16,-32,61,-3,-9,-54,-63,-14, 
  /* [1][0][][] */ -50,3,-78,-46,12,91,-55,19,-11,-33,-46,31,55,-16,-28,-25,-26,-34,-7,19,-65,46,-97,-45,-47,-37,48,67,-22,-32,38,-38,14,-57,-33,52,14,-58,127,-35,-22,31,-43,-12,38,51,29,19, 
  /* [2][0][][] */ 9,4,60,-34,-20,-84,14,26,97,75,-61,14,111,-51,127,83,-76,-26,-35,32,93,-87,-37,-100,7,-44,40,-70,40,48,-37,10,29,-27,64,41,-69,9,-4,-34,28,25,61,-17,18,-91,103,-55, 
  /* [3][0][][] */ 36,7,-28,-27,28,107,11,-16,43,-45,25,-27,-57,12,6,36,-46,-66,33,-118,-9,-4,-26,-16,-43,88,127,60,-12,-39,30,36,56,-26,98,32,-50,-56,2,40,26,15,-18,-6,26,16,-6,-24, 
  /* [4][0][][] */ 97,-14,11,-46,94,87,54,15,76,-18,-107,29,44,-21,20,-9,-98,-118,-22,-96,-16,22,-38,-30,-85,127,-102,125,-54,-61,22,80,41,-52,21,-31,-12,9,-22,33,-53,-14,3,48,-53,105,-31,-56, 
  /* [5][0][][] */ -3,-2,-59,4,-16,57,15,-26,65,57,38,90,50,-20,30,-6,-40,127,-19,41,8,-2,-67,-15,35,0,-63,-37,-14,31,19,-20,-41,4,41,15,-50,7,-85,8,90,-21,26,44,-14,6,-37,33, 
  /* [6][0][][] */ 57,19,11,79,1,-33,99,-48,1,70,127,104,36,52,-57,62,38,-45,-74,96,52,-67,-46,63,-87,90,96,-6,115,44,-33,-3,94,-62,-119,-3,97,28,5,3,8,59,57,-41,63,122,35,0, 
  /* [7][0][][] */ -94,-1,-24,22,-61,-58,21,51,83,113,-57,-75,-100,10,-17,-19,-79,102,-1,123,-57,42,28,39,-19,-97,-32,-81,31,41,-6,5,-17,10,14,-15,1,-55,127,10,6,43,21,-15,61,71,-26,-1, 
  /* [8][0][][] */ -15,-93,53,-57,65,-56,75,-34,-29,-111,31,14,-31,1,31,34,-3,8,-39,102,11,35,-25,30,64,-7,-58,-29,-127,-23,-57,-109,8,-62,1,87,-4,29,112,21,15,-2,77,116,-16,-66,-40,86, 
  /* [9][0][][] */ 21,-36,21,-70,40,81,-43,51,20,-39,-37,-21,17,-46,112,-19,5,-123,41,50,-72,39,61,-36,-27,-83,-26,83,57,73,-40,-33,-55,34,-5,127,-32,-46,-57,-27,-33,-3,33,101,59,81,-69,12, 
  /* [10][0][][] */ -14,21,-24,-8,20,26,-68,-42,47,40,65,-8,-37,-8,47,-52,-61,127,0,54,1,-11,19,29,-44,43,7,93,36,7,-33,-14,70,12,-6,26,-11,-51,-41,20,-84,-3,25,-18,12,42,33,35, 
  /* [11][0][][] */ -29,46,-22,35,26,59,-1,9,18,19,-127,-69,71,19,-10,-44,-1,25,-42,-43,-13,-4,102,5,48,11,-17,31,-8,26,-9,49,28,-4,-51,2,42,79,100,24,35,-33,66,-4,-56,-20,83,7, 
  /* [12][0][][] */ -69,3,33,22,-66,-61,0,6,-40,-32,-127,12,66,-100,14,35,52,101,84,-121,-29,40,-44,-80,1,-19,40,-34,7,14,-18,72,66,84,41,-35,-60,-36,31,1,-34,16,58,-4,36,-18,-37,-37, 
  /* [13][0][][] */ -62,-120,-50,-101,8,21,63,14,-118,27,121,-66,55,50,127,4,122,26,-6,-98,77,-83,123,4,-83,5,-32,9,-40,-102,-113,13,44,-26,-73,59,25,-56,86,-76,-10,56,69,40,63,-26,101,-73, 
  /* [14][0][][] */ 58,19,-50,7,-34,20,-79,-26,-31,64,53,52,-6,-63,14,-44,57,-111,22,8,90,-55,16,-10,-10,127,-89,6,-58,-25,-94,9,121,44,80,-18,-76,13,-15,57,-15,-47,108,-22,-45,-39,-59,53, 
  /* [15][0][][] */ -62,14,39,14,93,0,0,32,22,79,-21,49,50,-13,-37,-19,11,34,-2,-35,25,-40,-45,-53,53,-63,-38,63,-33,6,13,6,-60,1,127,-4,-91,13,56,-13,-47,-18,18,-1,-32,-32,-11,4, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0060668056830763817, 0.0065858447924256325, 0.0077146491967141628, 0.0080636702477931976, 0.004250040277838707, 0.0066448892466723919, 0.0042934245429933071, 0.0047072237357497215, 0.0046219043433666229, 0.0044538211077451706, 0.0075659160502254963, 0.0070967087522149086, 0.0056532789021730423, 0.0032234927639365196, 0.0065111503936350346, 0.0055503714829683304, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 15110, -678, 20146, -113, 15583, -1953, 35950, 655, 9108, 39891, 1489, 21728, 3890, 11579, 32827, 25459, 111, -467, 4588, 43588, -125, 19623, -26, 15614, 17987, 32212, 1099, -579, -3452, 11715, 20830, 313, 2225, -1521, 100, 17329, 11878, 29829, 1465, 15542, 28625, 344, 827, 17051, 1209, 1745, 39699, 22824, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.0363639174029231e-05, 9.9058997875545174e-05, 6.7288798163644969e-05, 0.00013824700727127492, 0.00010912011930486187, 8.1794220022857189e-05, 5.4355499742086977e-05, 0.00031726367888040841, 0.00010536101035540923, 5.0446251407265663e-05, 6.8458117311820388e-05, 0.00012329846504144371, 6.1538019508589059e-05, 9.9594981293193996e-05, 5.3588497394230217e-05, 8.4800238255411386e-05, 9.4673661806154996e-05, 7.7070333645679057e-05, 0.00012691889423877001, 5.1123424782417715e-05, 7.5783507782034576e-05, 6.712030153721571e-05, 0.000116544688353315, 9.9548349680844694e-05, 6.495464185718447e-05, 7.8525605204049498e-05, 5.7223413023166358e-05, 4.0736442315392196e-05, 0.00025249485042877495, 0.00013114532339386642, 6.7067827330902219e-05, 0.00035677419509738684, 0.00010204489808529615, 0.00017294184362981468, 0.00010968971037073061, 8.8075998064596206e-05, 0.00011205410555703565, 6.4802654378581792e-05, 9.3571907200384885e-05, 0.00011052203626604751, 5.0846050726249814e-05, 0.0001619942340767011, 0.00031394543475471437, 7.1487855166196823e-05, 0.00014677447325084358, 5.7899724197341129e-05, 5.134829189046286e-05, 7.3807699664030224e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -90,51,-127,99,-90,73,-50,88,-64,-65,65,-36,54,-70,-53,-64,79,64,87,-109,97,-109,74,-84,-92,-70,69,120,-98,-47,-95,55,70,-88,71,-109,-88,-119,92,-40,-18,-91,127,-109,102,58,-73,-55, -114,75,-70,118,-75,127,-52,87,-106,-81,97,-65,94,-110,-70,-85,103,98,127,-127,121,-127,90,-124,-99,-96,83,127,33,-70,-113,106,98,-127,95,-127,-96,-127,113,-62,-108,107,121,-127,-45,112,-88,-84, -54,42,-5,28,-27,58,-30,26,-44,-26,36,-18,44,-47,-25,-20,47,44,65,-39,36,-67,37,-56,-82,-36,35,31,97,-34,-62,15,27,-80,34,-44,-35,-40,45,-43,-118,-26,53,-46,-71,64,-22,-59, 
  /* [0][1][][] */ -115,85,-76,110,-73,124,-114,110,-102,-100,86,-87,79,-98,-83,-104,93,82,-60,-112,116,-112,107,-84,-108,-89,101,99,-127,-82,-104,91,93,36,98,-111,-107,-123,107,-75,-123,-122,114,-104,127,63,-124,-92, -127,127,-117,127,-127,123,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-67,-123,127,-118,127,-127,-127,-127,127,110,24,-127,-127,127,127,46,127,-120,-127,-106,127,-127,-127,127,113,-126,-69,127,-127,-127, -78,78,-91,34,-59,29,-61,40,-41,-45,55,-61,59,-62,-50,-24,63,54,-52,-35,43,-59,47,-58,-115,-48,61,46,113,-65,-67,26,41,12,52,-44,-40,-30,54,-56,-57,-60,34,-54,-93,81,-24,-75, 
  /* [0][2][][] */ -47,33,-5,51,-34,48,-51,26,-43,-41,24,-38,29,-53,-31,-64,49,31,-80,-10,31,-34,32,-27,-56,-36,37,-4,-71,-41,-31,21,24,61,49,-66,-46,-56,36,-33,-102,-59,45,-89,80,32,-62,-34, -72,59,-83,61,-55,31,-67,49,-59,-45,50,-63,52,-81,-52,-56,67,51,-98,-7,31,-33,31,-44,-66,-52,42,35,12,-74,-50,5,31,77,64,-48,-54,-52,35,-32,-54,72,37,-121,-27,51,-72,-49, -33,33,-66,11,-27,-17,-32,20,-8,-16,16,-26,29,-30,-24,-2,34,18,-75,5,19,4,8,-6,-39,-6,35,23,66,-24,-15,4,10,53,33,-13,-9,-17,19,-18,13,-16,-1,-48,-49,46,-12,-41, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0038404546212404966, 0.0042100073769688606, 0.002859773812815547, 0.0058754975907504559, 0.004637605044990778, 0.0034762541763484478, 0.0023101086262613535, 0.013483705930411816, 0.0044778427109122276, 0.0021439655683934689, 0.0029094698838889599, 0.0052401847206056118, 0.0026153656654059887, 0.0042327865958213806, 0.0022775111719965935, 0.0036040099803358316, 0.0040236306376755238, 0.0032754892017692327, 0.0053940531797707081, 0.00217274553142488, 0.003220799146220088, 0.0028526126407086849, 0.0049531492404639721, 0.0042308047413825989, 0.0027605721261352301, 0.003337338101118803, 0.0024319950025528669, 0.001731298747472465, 0.010731031186878681, 0.0055736764334142208, 0.0028503825888037682, 0.015162902884185314, 0.0043369079940021038, 0.0073500284925103188, 0.0046618124470114708, 0.0037432298995554447, 0.0047622993588447571, 0.0027541127055883408, 0.003976806066930294, 0.0046971864067018032, 0.002160957083106041, 0.0068847551010549068, 0.013342680409550667, 0.003038233844563365, 0.0062379147857427597, 0.0024607381783425808, 0.0021823022980242968, 0.0031368271447718143, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2620, -1137, 1196, -1974, 5148, -808, 4139, -4651, 1199, 693, 2400, 4982, 307, -631, 559, 5814, -1941, 4210, 5378, 736, -800, 2487, -771, 4624, 2619, 2472, 1376, -1090, 9743, -430, 2826, -2346, -1013, 4973, -1069, 1968, 2076, 1332, 402, 5090, 2516, 8302, -4595, 1301, 7450, 135, 2476, 3406, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00017099757678806782, 0.00030310917645692825, 0.00021349223970901221, 0.00023201566364150494, 0.00015243300003930926, 0.00015999477182049304, 0.00018623235519044101, 0.00012289739970583469, 0.00026526159490458667, 0.00025806250050663948, 0.00016912927094381303, 0.00015958934091031551, 0.00032106705475598574, 0.00024943493190221488, 0.00026932335458695889, 0.00014117413957137614, 0.00022605762933380902, 0.00017700194439385086, 0.00015947173233143985, 0.00032363334321416914, 0.000287967937765643, 0.00022670200269203633, 0.000196238630451262, 0.00017163422307930887, 0.00017294447752647102, 0.00017454581393394619, 0.0002354288735659793, 0.00020829844288527966, 9.4726943643763661e-05, 0.00025522665237076581, 0.00016000523464754224, 0.00015776143118273467, 0.00016134759061969817, 0.00015397023526020348, 0.00021219361224211752, 0.00026658823480829597, 0.00021865454618819058, 0.00019402647740207613, 0.0001894319721031934, 0.00015690023428760469, 0.00021273664606269449, 0.00010513419692870229, 0.0001251768262591213, 0.000307882932247594, 0.00011348554107826203, 0.00021926553745288402, 0.0002189100778196007, 0.0001830326218623668, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 71,25,127,-38,69,108,-74,-57, 
  /* [1][0][][] */ 10,-81,-127,7,57,20,28,2, 
  /* [2][0][][] */ -127,-13,-45,-30,55,32,-77,-45, 
  /* [3][0][][] */ 44,71,127,-72,-5,-110,-11,-22, 
  /* [4][0][][] */ -127,18,-51,-23,46,12,-40,-63, 
  /* [5][0][][] */ -104,23,-54,-14,12,38,-81,-127, 
  /* [6][0][][] */ -37,-127,-125,47,91,10,-1,43, 
  /* [7][0][][] */ -61,-127,-92,-72,-67,-62,15,82, 
  /* [8][0][][] */ 82,30,-6,-10,84,-72,-127,6, 
  /* [9][0][][] */ -36,53,-51,85,-59,-44,127,-34, 
  /* [10][0][][] */ -23,127,37,64,124,-20,-14,56, 
  /* [11][0][][] */ -83,-32,-24,-5,-94,106,127,-7, 
  /* [12][0][][] */ 63,33,-127,31,-8,-31,-65,-12, 
  /* [13][0][][] */ 62,-38,-66,6,16,-127,-29,-23, 
  /* [14][0][][] */ 12,-70,69,12,127,-115,-67,14, 
  /* [15][0][][] */ -38,-51,0,127,57,86,-78,20, 
  /* [16][0][][] */ 112,32,-34,18,71,-105,-127,-22, 
  /* [17][0][][] */ 60,127,54,76,50,62,29,-91, 
  /* [18][0][][] */ 38,-6,-4,-1,127,-7,18,-11, 
  /* [19][0][][] */ 9,127,39,15,-123,23,30,-37, 
  /* [20][0][][] */ -39,18,63,-127,22,28,-14,103, 
  /* [21][0][][] */ -36,60,42,-127,30,48,-10,105, 
  /* [22][0][][] */ -73,-67,-102,23,-127,118,113,-24, 
  /* [23][0][][] */ 92,36,-127,21,16,-46,-70,-16, 
  /* [24][0][][] */ -56,40,13,0,-19,86,-127,104, 
  /* [25][0][][] */ -101,-60,-127,14,-56,-65,71,96, 
  /* [26][0][][] */ 41,-9,-37,-32,109,-16,127,-39, 
  /* [27][0][][] */ 127,-71,27,92,3,35,-19,97, 
  /* [28][0][][] */ 49,57,58,-5,127,-50,45,-28, 
  /* [29][0][][] */ -10,-12,-27,-52,-74,14,127,-39, 
  /* [30][0][][] */ 48,-127,-54,-80,-107,-5,7,-52, 
  /* [31][0][][] */ 11,30,-9,-8,-127,6,-24,-14, 
  /* [32][0][][] */ 42,-63,-57,77,-4,-91,119,-127, 
  /* [33][0][][] */ 65,127,49,41,68,-30,-31,-32, 
  /* [34][0][][] */ -127,-33,127,-3,-28,102,97,14, 
  /* [35][0][][] */ -32,76,127,-18,-69,-78,-40,26, 
  /* [36][0][][] */ -91,-3,95,-28,-20,127,77,21, 
  /* [37][0][][] */ -22,-85,-7,-127,-44,-85,76,50, 
  /* [38][0][][] */ 49,-17,86,-58,52,61,-127,11, 
  /* [39][0][][] */ -20,84,-127,-43,-27,1,8,84, 
  /* [40][0][][] */ 65,-56,23,32,12,1,10,127, 
  /* [41][0][][] */ -25,80,127,-12,6,72,-63,21, 
  /* [42][0][][] */ 64,-127,-118,-27,-112,2,10,-90, 
  /* [43][0][][] */ -7,-81,34,-64,127,-41,19,37, 
  /* [44][0][][] */ 6,121,127,15,7,52,-67,2, 
  /* [45][0][][] */ -39,43,17,89,-118,64,-127,22, 
  /* [46][0][][] */ -40,-38,61,45,-127,-119,-36,-5, 
  /* [47][0][][] */ -25,62,43,-100,-127,32,-10,63, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0022796299308538437, 0.004040856845676899, 0.0028461415786296129, 0.0030930838547646999, 0.0020321388728916645, 0.0021329475566744804, 0.0024827301967889071, 0.0016383893089368939, 0.0035362974740564823, 0.0034403237514197826, 0.002254722872748971, 0.0021275426261126995, 0.00428025983273983, 0.0033253065776079893, 0.0035904459655284882, 0.0018820429686456919, 0.0030136553104966879, 0.0023596764076501131, 0.0021259747445583344, 0.0043144719675183296, 0.0038390038534998894, 0.0030222455970942974, 0.0026161274872720242, 0.0022881173063069582, 0.0023055847268551588, 0.0023269327357411385, 0.0031385866459459066, 0.0027769012376666069, 0.0012628388358280063, 0.0034025178756564856, 0.0021330870222300291, 0.0021031741052865982, 0.0021509826183319092, 0.0020526323933154345, 0.0028288289904594421, 0.0035539830569177866, 0.002914962125942111, 0.0025866364594548941, 0.0025253854691982269, 0.0020916932262480259, 0.0028360683936625719, 0.0014015816850587726, 0.0016687770839780569, 0.0041044978424906731, 0.0015129164094105363, 0.002923107473179698, 0.0029183686710894108, 0.0024400735273957253, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 1399, 831, 23435, -5757, 5430, -13755, 3785, -13717, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.4379549662116915e-05, 0.00011294562136754394, 0.00014299585018306971, 0.00010934085730696097, 0.00014848847058601677, 0.00011864992848131806, 8.4561994299292564e-05, 7.9852216003928334e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -40,-45,-14,-65,-1,-10,89,89,-100,-95,-33,11,-55,-4,-66,40,-83,14,25,127,68,-20,11,99,73,82,35,6,-87,-61,-74,-63,-45,97,43,-53,35,-28,100,-2,26,-2,3,-109,45,-33,-31,-78, 
  /* [1][0][][] */ -16,56,-18,-27,-73,63,-21,-48,-32,75,-20,17,59,47,-53,-2,-26,-126,75,-55,127,10,-68,23,56,-4,-83,64,43,-18,75,34,-30,-18,0,-9,-1,111,-11,-32,66,49,-11,13,107,14,-34,58, 
  /* [2][0][][] */ -28,-39,113,3,85,-45,-11,22,-30,-5,-16,49,12,-40,-45,-127,-55,-99,-24,16,-99,20,-41,-32,-47,16,-4,-47,-45,6,-33,-13,-3,-7,25,-4,27,-31,-51,9,39,-32,30,-51,-47,-44,-65,-50, 
  /* [3][0][][] */ 57,19,71,16,20,-40,32,81,-51,-30,40,-28,-70,59,-18,60,68,33,-36,30,-115,-66,127,-7,-1,6,-58,-36,-52,68,127,-64,10,-120,-29,49,-15,-83,-10,79,-75,-55,62,4,-102,-68,67,-10, 
  /* [4][0][][] */ 15,-14,65,-30,1,-4,-5,0,-60,-7,-18,6,40,-68,38,-93,38,44,-10,-33,8,32,17,7,0,3,57,-17,27,19,-127,-15,-27,-20,7,12,46,-3,36,1,-41,-11,-62,23,-12,-95,0,17, 
  /* [5][0][][] */ 24,-48,56,30,34,12,27,-2,-71,-6,-47,26,33,5,11,-45,92,72,-7,-15,81,-63,127,-89,-19,41,0,49,6,13,-35,-48,-20,-44,-43,13,38,29,64,2,-76,32,28,28,44,-13,79,-7, 
  /* [6][0][][] */ -50,64,-124,85,48,16,36,19,-27,-7,65,-79,-103,-20,-30,20,-123,28,-14,90,21,45,-84,-94,-14,-24,25,81,-31,-38,-56,5,46,73,-53,-32,-22,-3,84,-2,67,68,-127,-61,-36,123,-55,-44, 
  /* [7][0][][] */ 30,70,-89,15,24,57,117,73,40,77,-104,-4,-44,7,-67,-52,29,35,121,108,89,0,127,28,106,102,-54,105,-77,35,-5,-75,11,-74,-22,27,0,105,-66,79,-61,45,-8,-89,80,-20,49,-34, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0035861306823790073, 0.0048001888208091259, 0.0060773235745728016, 0.0046469862572848797, 0.0063107595779001713, 0.0050426218658685684, 0.0035938846413046122, 0.0033937192056328058, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -461, 10997, -257, -121, 1807, -1301, 2171, -3527, -4693, 98, -6463, -157, 318, -789, -1937, 5111, 7608, 1944, 109, -3581, -6706, 1678, 17313, -5185, -3686, -1109, 3348, -5451, 510, 194, -7834, 9331, 5501, 100, 3165, 1077, -56, 215, 9081, -1590, 6338, -1462, 2170, 5765, 13, 8372, -413, 2545, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00035659762215800583, 0.00015638952027074993, 0.00075241434387862682, 0.00023368724214378744, 0.00022611540043726563, 0.00025863313931040466, 0.00020396622130647302, 0.00033379177330061793, 9.9716533441096544e-05, 0.00034634865005500615, 0.00022744385933037847, 0.0015348372980952263, 0.00041975572821684182, 0.00071113085141405463, 0.0004403924394864589, 0.00058316817739978433, 0.00015229806012939662, 7.0541005698032677e-05, 0.00024345077690668404, 0.00033216117299161851, 0.00025389430811628699, 0.00024422263959422708, 8.589056960772723e-05, 0.00046010912046767771, 0.0001841544290073216, 0.00034073597635142505, 0.00052602431969717145, 0.00021543297043535858, 0.0002428345032967627, 0.00038571885670535266, 0.00015472309314645827, 0.00012064771726727486, 0.00014988872862886637, 0.00024149974342435598, 0.00015534651174675673, 0.00039770585135556757, 0.0032579307444393635, 0.00040209013968706131, 0.00017337556346319616, 0.00022657639055978507, 0.0001819473400246352, 0.00014723639469593763, 0.00031162978848442435, 0.00021751748863607645, 0.0003434731625020504, 9.0617017121985555e-05, 5.9220594266662374e-05, 0.00020405059331096709, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 11,-43,8,8,-20,-117,-46,57,-38,6,-7,9,48,-4,-16,3,83,8,15,4,-5,-24,-65,28,0,-12,4,-39,-62,82,-8,-112,52,-12,-46,-63,-6,-41,7,-12,-16,47,11,3,-16,62,127,-32, -127,-84,-24,127,-70,100,-101,127,27,19,11,-4,51,21,-1,-46,-22,50,29,8,11,127,19,127,127,-28,-41,37,61,-127,-1,-84,71,-11,-41,-127,29,10,-54,-43,-127,-11,-90,-127,35,50,56,101, -14,-1,10,6,-31,33,41,46,11,-37,9,5,-27,0,-5,4,-48,31,-65,-27,-3,-32,127,23,-54,3,14,6,10,42,13,7,-6,-14,-28,75,9,3,18,84,27,-34,31,-34,-11,32,-13,-20, 
  /* [0][1][][] */ -10,-31,-29,0,29,-127,127,-70,-13,14,23,40,127,17,-3,-36,-27,-31,25,43,55,-74,46,15,-58,127,-73,-30,127,-100,42,-127,-46,1,-69,5,15,-69,-47,9,120,127,10,-117,-70,-57,-10,70, 97,-127,127,0,127,82,-74,-39,34,127,127,-127,-92,127,127,127,127,127,127,127,127,114,6,3,126,-96,-127,121,32,127,127,0,-127,127,127,113,-127,127,-127,-114,36,34,-127,-36,127,-127,-13,70, 22,31,-41,-6,-57,126,-122,90,116,-79,23,65,-41,11,10,-68,21,3,-122,14,23,-123,-43,-4,81,-11,-25,127,-81,-41,20,-43,-30,18,107,-22,43,-8,-1,-73,110,-10,34,44,-60,91,110,-84, 
  /* [0][2][][] */ -4,14,5,-28,-3,-81,-18,-2,1,0,-3,6,-17,-14,-6,-3,-48,20,4,-43,-6,-33,91,-9,-107,6,50,-35,14,-3,6,52,-23,-14,-63,19,3,-18,19,50,-31,-4,14,8,-22,25,-18,0, 38,-20,-36,-35,22,37,121,-79,127,-33,-7,8,-73,-21,-24,-74,-12,113,3,19,12,22,-24,-33,-70,58,89,-11,-96,12,-23,-9,-32,-6,-32,-8,60,-29,2,127,-124,-9,-5,55,32,56,9,-127, -5,22,3,-20,-20,-13,-6,-38,-22,-24,-11,6,15,-11,-12,13,46,36,-30,-22,-4,-30,-54,-14,29,-22,26,-16,-20,0,-4,18,18,-20,-13,-55,-4,1,31,29,-13,-28,9,14,-18,22,72,-59, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015155398286879063, 0.0066465544514358044, 0.031977608799934387, 0.0099317077547311783, 0.0096099041402339935, 0.010991907678544521, 0.0086685642600059509, 0.014186150394380093, 0.0042379526421427727, 0.014719817787408829, 0.0096663637086749077, 0.065230585634708405, 0.017839618027210236, 0.0302230603992939, 0.018716678023338318, 0.024784646928310394, 0.0064726676791906357, 0.0029979925602674484, 0.01034665759652853, 0.01411684975028038, 0.010790507309138775, 0.010379462502896786, 0.003650349099189043, 0.019554637372493744, 0.0078265629708766937, 0.014481278136372566, 0.022356033325195312, 0.0091559011489152908, 0.010320466011762619, 0.01639305055141449, 0.006575731560587883, 0.0051275277510285378, 0.0063702710904181004, 0.01026373915374279, 0.0066022267565131187, 0.01690249890089035, 0.13846205174922943, 0.017088830471038818, 0.0073684612289071083, 0.0096294963732361794, 0.007732762023806572, 0.0062575465999543667, 0.0132442656904459, 0.0092444932088255882, 0.014597608707845211, 0.0038512230385094881, 0.0025168752763420343, 0.0086721498519182205, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2965, 5363, 15088, 1231, 2066, -1841, 5157, 14372, 3954, -716, 3538, -2239, 19340, -1522, 1917, 17557, -314, 2125, 179, 2636, 3750, 3260, 569, 26712, 5963, 3752, 12498, 1818, 5868, 4700, 453, 1084, 929, 1868, -167, 347, -2938, -409, 2757, 2716, 4171, 2519, 3349, 5138, 4761, 3689, 1777, 6193, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00020618484995793551, 0.00015611696289852262, 6.5429027017671615e-05, 0.00023070858151186258, 0.0002484530268702656, 0.00022296687529888004, 0.00014976366946939379, 6.6858570789918303e-05, 0.00014734950673300773, 0.00023407163098454475, 0.00022861752950120717, 0.00022085965611040592, 5.0720485887723044e-05, 0.00028734319494105875, 0.00023975668591447175, 6.0374273743946105e-05, 0.00031728757312521338, 0.00021810534235555679, 0.00023861062072683126, 0.00023525970755144954, 0.00018629069381859154, 0.00023319998581428081, 0.00031667682924307883, 4.1650499042589217e-05, 0.00014727299276273698, 0.00014859435032121837, 8.137537952279672e-05, 0.00023036923084873706, 0.00013009678514208645, 0.00015710302977822721, 0.00053431204287335277, 0.00040149339474737644, 0.00021957699209451675, 0.00020272446272429079, 0.00026460346998646855, 0.00027174621936865151, 0.0002045997534878552, 0.0002784843381959945, 0.00021822380949743092, 0.00019108099513687193, 0.0001867471873993054, 0.00021313794422894716, 0.00023454686743207276, 0.00015956553397700191, 0.00015950971283018589, 0.00019661299302242696, 0.00036015501245856285, 0.00013768108328804374, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 63,127,-83,-83,4,86,19,70, 
  /* [1][0][][] */ 61,-77,52,-127,-53,68,-88,-38, 
  /* [2][0][][] */ -30,127,126,46,114,8,52,7, 
  /* [3][0][][] */ 105,36,-104,57,-6,-101,-127,-33, 
  /* [4][0][][] */ -42,30,19,-63,-43,109,127,50, 
  /* [5][0][][] */ 17,82,-127,-73,49,89,25,-27, 
  /* [6][0][][] */ -12,127,60,55,76,13,19,-88, 
  /* [7][0][][] */ 127,-11,-28,32,22,5,95,23, 
  /* [8][0][][] */ 53,127,55,90,100,74,86,-73, 
  /* [9][0][][] */ 39,96,-127,-91,4,91,11,58, 
  /* [10][0][][] */ -65,-41,20,-50,-2,-30,-47,127, 
  /* [11][0][][] */ 16,-116,-127,-22,23,-13,43,-7, 
  /* [12][0][][] */ -28,-98,-111,-20,-127,24,-71,43, 
  /* [13][0][][] */ -3,11,-108,109,-127,-31,3,-21, 
  /* [14][0][][] */ -67,-38,-127,-12,37,1,-17,-54, 
  /* [15][0][][] */ 25,-100,-127,8,-98,-22,-31,-17, 
  /* [16][0][][] */ 127,-64,-20,65,-85,28,32,94, 
  /* [17][0][][] */ -29,114,127,-19,-54,-14,-30,-18, 
  /* [18][0][][] */ 7,-127,53,77,-1,-65,54,-88, 
  /* [19][0][][] */ 127,-47,-54,40,-98,6,44,102, 
  /* [20][0][][] */ -31,-127,79,72,-16,-85,3,-71, 
  /* [21][0][][] */ -3,-47,-16,-32,127,-7,48,19, 
  /* [22][0][][] */ -127,21,-77,52,49,56,-91,-117, 
  /* [23][0][][] */ -86,-52,62,-4,-95,117,127,-54, 
  /* [24][0][][] */ -31,54,-10,-52,-37,120,127,-6, 
  /* [25][0][][] */ -56,-116,-127,-69,-55,-15,-22,-42, 
  /* [26][0][][] */ -19,63,-10,127,-100,48,-53,-6, 
  /* [27][0][][] */ 11,-127,31,81,12,-56,6,-120, 
  /* [28][0][][] */ 23,127,52,42,106,-22,15,-53, 
  /* [29][0][][] */ 108,24,-47,-10,82,-127,-110,36, 
  /* [30][0][][] */ 27,-7,41,-127,22,-20,19,-25, 
  /* [31][0][][] */ 44,-43,3,61,-12,31,12,127, 
  /* [32][0][][] */ -85,-64,18,-60,-61,127,59,90, 
  /* [33][0][][] */ -32,49,46,-43,36,127,-112,78, 
  /* [34][0][][] */ 33,127,-83,-46,20,42,-55,56, 
  /* [35][0][][] */ 10,-127,30,53,-26,-53,32,-67, 
  /* [36][0][][] */ -14,-27,-77,-12,-127,-50,-16,10, 
  /* [37][0][][] */ -54,-127,61,72,-47,-81,-4,-54, 
  /* [38][0][][] */ -71,20,58,-71,-127,-80,-57,79, 
  /* [39][0][][] */ 66,-127,95,49,-10,-79,-21,-86, 
  /* [40][0][][] */ -8,65,26,49,-127,-18,-63,28, 
  /* [41][0][][] */ 102,127,-87,-110,46,24,1,21, 
  /* [42][0][][] */ -9,-39,-15,14,127,9,47,19, 
  /* [43][0][][] */ 127,19,79,19,-75,-26,68,102, 
  /* [44][0][][] */ 71,41,-33,18,70,-117,-127,19, 
  /* [45][0][][] */ 41,7,12,24,68,-127,-4,-51, 
  /* [46][0][][] */ 56,-33,-8,127,35,57,15,71, 
  /* [47][0][][] */ -75,-82,36,59,-48,19,127,-77, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0029133285861462355, 0.0022058847825974226, 0.00092449202202260494, 0.0032598413527011871, 0.0035105650313198566, 0.0031504535581916571, 0.0021161145996302366, 0.00094469106988981366, 0.0020820032805204391, 0.0033073602244257927, 0.0032302956096827984, 0.0031206791754812002, 0.00071666488656774163, 0.0040600709617137909, 0.0033876884263008833, 0.00085306994151324034, 0.0044831759296357632, 0.0030817615333944559, 0.003371494822204113, 0.0033241475466638803, 0.0026322302874177694, 0.003295044181868434, 0.0044745462946593761, 0.00058850878849625587, 0.0020809222478419542, 0.0020995924714952707, 0.0011498091043904424, 0.0032550464384257793, 0.0018382277339696884, 0.0022198176011443138, 0.0075496654026210308, 0.0056729782372713089, 0.0031025554053485394, 0.0028644343838095665, 0.0037387658376246691, 0.0038396904710680246, 0.0028909316752105951, 0.0039348984137177467, 0.0030834353528916836, 0.0026999157853424549, 0.0026386803947389126, 0.0030115738045424223, 0.0033140752930194139, 0.0022546120453625917, 0.0022538232151418924, 0.0027780812233686447, 0.0050888797268271446, 0.0019453914137557149, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7094, 15252, -4323, 7576, -775, 3707, -11080, -18514, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00023309547395911068, 0.00010857633606065065, 0.00015180387708824128, 0.00014956436643842608, 0.00018287317652720958, 0.00015674909809604287, 0.00027500305441208184, 0.00014685354835819453, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -49,-5,31,11,-32,-16,9,10,-43,-5,-64,-55,-21,-68,-8,-29,48,-43,41,40,-13,31,-37,13,1,-38,59,-17,-2,-19,17,10,86,36,40,-127,17,0,-15,-37,6,-17,49,47,38,7,31,1, 
  /* [1][0][][] */ -1,41,67,-29,-13,44,-50,-29,2,24,-14,-94,9,92,-17,58,-18,21,-23,-56,10,-80,-28,21,-71,-13,-5,-113,-27,-17,31,-50,48,83,-37,1,127,-32,-1,50,-29,40,-84,-30,115,-22,-31,-27, 
  /* [2][0][][] */ -2,-17,-63,11,-3,43,26,1,-8,40,-6,30,66,-94,15,-65,34,-85,24,37,-28,52,-2,26,-17,61,-25,-66,15,3,20,-67,-49,-89,33,-29,106,18,-14,-57,-1,27,79,27,127,15,17,24, 
  /* [3][0][][] */ -9,22,-69,38,14,-40,-71,-99,16,-20,-33,-1,2,22,35,79,-4,13,-35,23,9,-99,29,-60,-73,-10,127,-14,-44,4,-66,19,-2,-80,13,-13,-24,-41,-25,100,-43,-40,1,14,37,6,-36,40, 
  /* [4][0][][] */ -26,-44,-5,7,29,-26,-11,-7,27,-30,61,-80,4,32,8,12,-17,-25,9,-16,-3,-53,5,-19,17,-12,42,48,34,23,-17,25,-9,-1,2,-4,-70,85,35,-25,27,-19,-20,-24,-79,11,127,11, 
  /* [5][0][][] */ 43,-24,1,13,26,-43,33,-127,24,-28,-9,119,-80,66,25,-64,-1,-90,17,1,-33,69,-35,-48,-62,75,-24,3,-21,47,-39,-36,28,55,34,-8,-43,-7,-48,-42,18,-40,-46,-10,-31,55,89,19, 
  /* [6][0][][] */ 52,-23,20,-11,-37,-18,-40,19,-42,9,-38,127,-44,-39,-4,61,9,44,15,31,40,-86,-20,20,20,37,-62,4,8,-44,15,37,6,17,-18,-3,9,3,-2,-8,-10,-19,42,56,-3,-37,71,-14, 
  /* [7][0][][] */ -25,5,-9,63,31,32,6,27,23,9,66,-1,127,105,65,46,45,50,-18,7,19,-20,-87,-26,14,-1,-30,67,32,-30,-31,-17,32,5,41,-96,-79,35,38,60,-33,32,88,127,-59,-29,-113,63, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0099065573886036873, 0.0046144942753016949, 0.0064516644924879074, 0.0063564851880073547, 0.0077721099369227886, 0.0066618365235626698, 0.011687629856169224, 0.0062412754632532597, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 12471, 4591, 4474, 474, 935, -1842, -1127, 31117, 1058, 1826, 7832, 56417, 1735, 5418, -242, 10553, -1208, 13176, -345, 7812, 12205, -4, 2094, -9035, 11171, 844, 3199, 13597, 1867, -2248, -9171, 11280, 4752, 2171, 187, 8325, -8924, 15349, -1703, 18720, -956, -1173, 4768, 3797, 901, -359, 1980, -318, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.0035500761587173e-05, 9.9406526715029031e-05, 0.00015457754489034414, 0.00014542121789418161, 0.00080802309093996882, 0.00018097493739333004, 0.00020473770564422011, 9.7009949968196452e-05, 0.00013707533071283251, 8.1357145973015577e-05, 6.723248225171119e-05, 5.1053357310593128e-05, 8.3424791228026152e-05, 5.7298861065646634e-05, 0.00028326688334345818, 0.00018472426745574921, 0.00011326864478178322, 0.00034714039065875113, 0.00013342616148293018, 0.00014396068581845611, 0.00010653588833520189, 0.00040049562812782824, 0.00010729509813245386, 0.00022197916405275464, 0.00011573660594876856, 0.00013735643005929887, 5.3651292546419427e-05, 8.2939062849618495e-05, 0.00017740012845024467, 0.0007826309883967042, 0.00023643778695259243, 7.8031785960774869e-05, 9.6292809757869691e-05, 0.0001357227738481015, 0.00017389254935551435, 4.9582038627704605e-05, 8.4380611951928586e-05, 3.6070141504751518e-05, 0.00010925591050181538, 7.2891329182311893e-05, 0.00013733825471717864, 0.00017330306582152843, 6.9421002990566194e-05, 6.9795110903214663e-05, 7.5263946200720966e-05, 0.00037208021967671812, 6.6633219830691814e-05, 0.00019544556562323123, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-81,-9,-24,127,-48,69,-52,-94,-82,-25,-39,122,41,76,-127,57,-26,8,-44,-75,127,-1,13,-10,75,70,-38,65,-64,15,-42,-102,-85,39,67,23,86,112,-77,-127,-13,39,74,52,-127,95,73, -52,-113,-66,40,-74,111,71,-64,-76,40,80,-110,127,94,123,-81,-90,-81,39,-59,-63,109,-66,118,-88,101,94,-120,81,-43,5,-119,-53,-86,72,127,115,127,127,-75,-127,-63,69,84,80,106,101,67, 10,-50,-63,81,-43,-24,30,-2,79,19,54,-74,15,58,-31,-8,-89,-17,33,-30,-28,22,-67,-3,-73,42,25,-82,25,57,122,-71,13,16,-11,50,75,70,53,3,-19,96,67,23,43,25,13,-127, 
  /* [0][1][][] */ -117,-96,-13,-82,-75,-68,101,-109,-127,-127,88,-68,101,48,-127,-78,127,-127,-58,-73,-82,124,-36,9,-8,91,108,-52,-107,-72,3,-49,-95,-127,-127,65,42,88,10,-89,58,-15,83,124,85,106,124,-126, -127,-127,-127,-110,-28,127,127,-127,87,66,127,-127,115,127,71,-105,57,-92,-127,-127,-127,114,-127,127,-127,127,127,-127,-127,127,-15,-127,-127,-114,47,126,127,127,-6,-127,96,-97,127,127,127,-2,127,107, -51,-68,-120,127,66,-40,43,-26,57,26,15,-63,6,68,84,-44,-18,3,-15,-61,-58,13,-76,-17,-116,38,34,-85,-55,40,127,-83,-57,14,60,79,76,70,-18,-27,43,127,74,17,57,-48,17,19, 
  /* [0][2][][] */ -112,-25,22,22,-47,-27,19,-39,29,-42,13,-25,8,19,-40,-13,-81,-24,102,-27,-23,31,-58,-14,5,48,65,-16,32,56,-8,-5,6,-86,-44,36,16,11,-57,-42,23,-3,38,45,29,51,19,-61, -80,-38,-34,-71,79,40,55,-60,91,23,-49,-51,-5,42,-122,-65,45,7,54,-63,-54,20,-60,55,-65,59,66,-37,36,8,-28,-35,-64,-28,-66,60,32,19,-101,-71,24,-42,79,69,40,-106,29,6, -14,-29,-45,-18,-25,-10,20,-27,-74,14,-19,-17,-16,14,39,-20,39,36,1,-39,-46,-4,-20,-28,-53,-3,16,-28,7,-58,47,-28,-84,24,18,47,16,17,-50,-33,2,46,19,19,18,-5,9,43, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038265087641775608, 0.0042247772216796875, 0.0065695452503859997, 0.0061804014258086681, 0.034340981394052505, 0.0076914345845580101, 0.0087013524025678635, 0.0041229226626455784, 0.0058257016353309155, 0.0034576787147670984, 0.0028573805466294289, 0.002169767627492547, 0.0035455536562949419, 0.002435201546177268, 0.012038841843605042, 0.0078507810831069946, 0.0048139174468815327, 0.014753466472029686, 0.005670611746609211, 0.0061183292418718338, 0.0045277751050889492, 0.017021063715219498, 0.0045600417070090771, 0.0094341142103075981, 0.0049188057892024517, 0.0058376481756567955, 0.0022801798768341541, 0.0035249099601060152, 0.0075395056046545506, 0.033261816948652267, 0.010048605501651764, 0.0033163509797304869, 0.0040924442000687122, 0.0057682180777192116, 0.0073904329910874367, 0.0021072365343570709, 0.0035861760843545198, 0.0015329810557886958, 0.0046433759853243828, 0.0030978815630078316, 0.005836875643581152, 0.007365379948168993, 0.0029503924306482077, 0.0029662922024726868, 0.0031987177208065987, 0.015813408419489861, 0.002831911901012063, 0.0083064362406730652, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1232, -459, -417, 1125, 14914, 2000, -505, 4466, 1516, 1205, 347, 3170, 1321, 713, -1116, 436, 3664, 12271, 3858, -764, 1242, -1266, -144, 1782, -220, -655, 1750, -30, 2974, 16849, 1878, -19, 551, -43, 3050, -34, 363, -201, 1069, 1239, 2009, 2389, 300, -328, 637, 2655, 1471, -197, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00040904679917730391, 0.00037966849049553275, 0.0002507606113795191, 0.00033900619018822908, 6.6246226197108626e-05, 0.00030560849700123072, 0.0004555321647785604, 0.00019580971274990588, 0.00029463367536664009, 0.00054066535085439682, 0.00029599672416225076, 0.00027271223370917141, 0.00020161365682724863, 0.00031292875064536929, 0.00025750946952030063, 0.00028342247242107987, 0.00019576425256673247, 7.6306678238324821e-05, 0.00019512134895194322, 0.00031000154558569193, 0.00037848413921892643, 0.00017874928016681224, 0.00042508463957346976, 0.00040739349788054824, 0.00056195759680122137, 0.00082948867930099368, 0.00029625117895193398, 0.0010882357601076365, 0.00026755681028589606, 5.7313183788210154e-05, 0.00039116240805014968, 0.00081294815754517913, 0.00036886273301206529, 0.00036774383625015616, 0.0002397435309831053, 0.00031446505454368889, 0.0005265626241452992, 0.00061556918080896139, 0.00039449561154469848, 0.00047009423724375665, 0.00027197203598916531, 0.00027506818878464401, 0.00029385404195636511, 0.00044542324030771852, 0.00042999323341064155, 0.00019633131159935147, 0.00024769632727839053, 0.00030993702239356935, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -40,27,8,-13,-87,-34,-127,34, 
  /* [1][0][][] */ 82,-72,-56,-54,127,-86,96,23, 
  /* [2][0][][] */ -101,127,-43,-126,55,-23,-23,38, 
  /* [3][0][][] */ 48,16,75,8,88,109,127,-21, 
  /* [4][0][][] */ -79,-127,75,9,-60,-117,5,-37, 
  /* [5][0][][] */ 127,-16,68,67,-63,-6,1,-16, 
  /* [6][0][][] */ 27,34,127,-24,40,-34,-40,26, 
  /* [7][0][][] */ 29,4,-127,-34,-43,95,94,-76, 
  /* [8][0][][] */ 5,127,-31,10,64,110,52,49, 
  /* [9][0][][] */ -7,123,-66,90,10,-101,44,127, 
  /* [10][0][][] */ 9,-127,1,-18,-80,-112,-50,-87, 
  /* [11][0][][] */ -127,-84,111,52,-9,-62,100,70, 
  /* [12][0][][] */ -25,51,-127,82,40,-53,-69,99, 
  /* [13][0][][] */ 94,-127,99,81,13,36,40,-63, 
  /* [14][0][][] */ -22,95,-36,-127,-22,-108,-23,-65, 
  /* [15][0][][] */ 42,123,31,-14,41,-64,101,-127, 
  /* [16][0][][] */ -116,-127,-63,92,-45,26,-21,86, 
  /* [17][0][][] */ -27,-102,-127,86,-54,73,-56,77, 
  /* [18][0][][] */ -103,-80,-56,92,-14,67,-10,127, 
  /* [19][0][][] */ 70,-125,113,-127,14,-65,37,-36, 
  /* [20][0][][] */ 2,80,34,11,47,127,74,-14, 
  /* [21][0][][] */ 26,115,46,-32,36,-72,91,-127, 
  /* [22][0][][] */ 22,9,99,21,-11,127,30,-34, 
  /* [23][0][][] */ -106,-63,32,-73,95,103,-64,-127, 
  /* [24][0][][] */ -93,-94,38,-82,107,108,-44,-127, 
  /* [25][0][][] */ 127,11,-58,-10,13,31,-60,-12, 
  /* [26][0][][] */ -127,-36,-125,-28,-50,-29,15,2, 
  /* [27][0][][] */ 81,32,-4,-58,-127,-24,89,92, 
  /* [28][0][][] */ -127,-75,1,50,-75,-94,4,2, 
  /* [29][0][][] */ 114,110,37,-127,33,20,-65,-94, 
  /* [30][0][][] */ -92,-64,45,-69,78,91,-57,-127, 
  /* [31][0][][] */ 51,45,-2,127,5,-70,9,7, 
  /* [32][0][][] */ -27,127,-3,35,22,66,-15,48, 
  /* [33][0][][] */ -33,127,-68,23,23,-33,-24,0, 
  /* [34][0][][] */ -127,-111,-50,95,-14,8,19,101, 
  /* [35][0][][] */ -50,127,-28,0,69,115,59,75, 
  /* [36][0][][] */ 71,29,-2,-42,-127,-28,99,114, 
  /* [37][0][][] */ -59,104,30,24,-127,102,-18,-102, 
  /* [38][0][][] */ 41,29,31,20,127,73,115,49, 
  /* [39][0][][] */ -25,-60,32,-17,14,38,-95,127, 
  /* [40][0][][] */ -78,-63,-79,127,-38,-7,6,62, 
  /* [41][0][][] */ 127,17,60,117,-49,-4,-2,-18, 
  /* [42][0][][] */ -43,11,-67,-127,55,-102,7,81, 
  /* [43][0][][] */ 23,-4,82,-7,39,127,91,7, 
  /* [44][0][][] */ -31,-27,-72,127,50,13,-43,-34, 
  /* [45][0][][] */ 61,127,102,-110,51,-62,15,-104, 
  /* [46][0][][] */ -33,-127,-39,29,-14,35,-66,112, 
  /* [47][0][][] */ 47,41,127,10,94,126,124,-22, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0045128720812499523, 0.0041887513361871243, 0.0027665551751852036, 0.0037401383742690086, 0.00073087174678221345, 0.0033716729376465082, 0.0050257290713489056, 0.0021603009663522243, 0.0032505914568901062, 0.005964974407106638, 0.003265629755333066, 0.0030087397899478674, 0.0022243338171392679, 0.003452434903010726, 0.0028410130180418491, 0.0031269022729247808, 0.0021597994491457939, 0.00084186519961804152, 0.0021527064964175224, 0.0034201398957520723, 0.0041756848804652691, 0.0019720790442079306, 0.0046898121945559978, 0.0044946316629648209, 0.0061998842284083366, 0.0091514624655246735, 0.0032684369944036007, 0.012006129138171673, 0.0029518618248403072, 0.00063231657259166241, 0.0043155597522854805, 0.0089689763262867928, 0.0040695350617170334, 0.0040571908466517925, 0.0026450075674802065, 0.0034693845082074404, 0.0058093834668397903, 0.006791362538933754, 0.0043523339554667473, 0.005186387337744236, 0.0030005734879523516, 0.0030347323045134544, 0.0032419902272522449, 0.0049142008647322655, 0.0047439667396247387, 0.0021660556085407734, 0.0027327481657266617, 0.0034194281324744225, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7771, -3211, 11696, -9861, 22896, 7846, -9027, 11391, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00016768096247687936, 0.00023451211745850742, 0.00018547313811723143, 0.00023770828556735069, 0.00022190522577147931, 0.00015370322216767818, 0.00018565858772490174, 0.00029537704540416598, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -9,-14,-21,-67,-26,-32,17,-19,41,10,-33,-5,112,127,-21,-106, 
  /* [1][0][][] */ 127,-58,-41,14,-44,71,-69,-44,-37,82,-33,-49,-7,3,-62,-17, 
  /* [2][0][][] */ -34,-95,41,41,48,-55,-77,-23,30,-86,26,-127,44,-21,-74,23, 
  /* [3][0][][] */ 37,14,18,14,-11,69,-56,-23,127,46,15,26,2,-12,14,25, 
  /* [4][0][][] */ -90,-38,-27,-127,-10,36,52,-118,30,-20,-46,-38,-121,30,-41,-22, 
  /* [5][0][][] */ 86,54,69,-30,48,-48,-127,-123,-16,-80,68,53,-58,50,67,-46, 
  /* [6][0][][] */ 106,42,-119,-78,27,-75,6,-92,-42,20,-127,95,91,-86,10,72, 
  /* [7][0][][] */ -127,-2,94,-26,-64,2,-2,-57,-50,59,81,-30,60,-25,29,27, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0071264407597482204, 0.0099667645990848541, 0.007882608100771904, 0.01010260172188282, 0.0094309719279408455, 0.006532386876642704, 0.0078904898837208748, 0.012553524225950241, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 17240, -599, 405, 2865, -750, 64, 11469, 1135, -1771, 264, -2180, 2605, 3068, -785, -254, -1020, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00013529481657315046, 0.00022195823839865625, 0.0001582365803187713, 0.00016476809105370194, 0.0014582318253815174, 0.0011839132057502866, 0.00015020444698166102, 0.0010258920956403017, 0.00041271996451541781, 0.0011017977958545089, 0.00025078075123019516, 0.00022596653434447944, 8.7993830675259233e-05, 0.00025345315225422382, 0.00023064302513375878, 0.00062614708440378308, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 3,-5,4,6,-19,11,4,16,-4,-11,1,-9,-2,-7,0,-2, 6,-5,1,5,13,-2,8,-26,-6,9,-3,88,-12,22,6,-1, 3,-5,-5,6,1,-14,-6,11,4,2,-2,-9,1,-6,-6,-2, 
  /* [0][1][][] */ 13,-8,0,3,127,-24,-127,-21,127,127,1,-4,114,-25,0,-20, -127,127,127,-2,-87,-91,-17,-102,18,-105,127,127,127,127,127,127, 19,-1,-6,0,-11,127,0,-10,0,-12,-4,-3,11,-6,-10,-9, 
  /* [0][2][][] */ 2,-3,-3,-17,-18,16,49,7,-11,-8,-3,1,-3,1,-7,-13, 23,-13,-6,-127,7,-15,-13,127,-5,1,-1,-11,-10,-57,-8,-37, 4,-4,-4,-3,0,-4,-4,-2,2,2,-5,4,1,-6,-8,-13, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0057500298134982586, 0.0094332247972488403, 0.0067250542342662811, 0.0070026437751948833, 0.061974849551916122, 0.050316311419010162, 0.0063836886547505856, 0.043600413948297501, 0.017540598288178444, 0.046826403588056564, 0.010658181272447109, 0.0096035776659846306, 0.0037397376727312803, 0.010771758854389191, 0.009802328422665596, 0.026611251756548882, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1346, 94, 445, -383, 64363, 58590, 3947, 4579, 7369, 4666, 1187, -26, 4073, -13387, 165, 49207, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.0002448816376272589, 0.0013629926834255457, 0.00028287951136007905, 0.00018689577700570226, 2.4725613911869004e-05, 2.8511125492514111e-05, 0.00016198272351175547, 2.6089750463142991e-05, 0.00011563842417672276, 3.2304571504937485e-05, 0.00061366456793621182, 0.0012182268546894193, 0.00039868021849542856, 1.7089678294723853e-05, 0.0010546490084379911, 3.1835086701903492e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 67, -37, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -12, -95, -79, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 26, -52, 3, 
  /* [4][1][][] */ 24, -127, 1, 
  /* [4][2][][] */ 18, -82, -16, 
  /* [5][0][][] */ -58, 32, -2, 
  /* [5][1][][] */ -127, 34, 2, 
  /* [5][2][][] */ -91, 22, -2, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 55, -16, 
  /* [6][2][][] */ -37, -52, -89, 
  /* [7][0][][] */ 38, 23, -20, 
  /* [7][1][][] */ 127, 67, -7, 
  /* [7][2][][] */ 30, 4, -22, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -20, 52, -11, 
  /* [9][1][][] */ -13, 127, -13, 
  /* [9][2][][] */ -6, 87, -8, 
  /* [10][0][][] */ 24, 87, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 50, -9, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 80, 5, 
  /* [13][0][][] */ 86, 23, -18, 
  /* [13][1][][] */ 127, 96, -17, 
  /* [13][2][][] */ 73, 95, 26, 
  /* [14][0][][] */ -31, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -92, -31, 15, 
  /* [15][1][][] */ -127, -125, 15, 
  /* [15][2][][] */ -23, -76, -9, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.062444817274808884, 0.34756311774253845, 0.072134271264076233, 0.047658421099185944, 0.0063050310127437115, 0.0072703366167843342, 0.04130559042096138, 0.0066528860479593277, 0.029487796127796173, 0.008237665519118309, 0.156484454870224, 0.31064781546592712, 0.10166344791650772, 0.0043578678742051125, 0.26893547177314758, 0.0081179467961192131, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.09064001590013504, } };
const TfArray<1, int> quant46_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.070772945880889893, } };
const TfArray<1, int> quant50_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.052331347018480301, } };
const TfArray<1, int> quant53_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.075011111795902252, } };
const TfArray<1, int> quant54_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.022383080795407295, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.049988154321908951, } };
const TfArray<1, int> quant58_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.020880868658423424, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023205243051052094, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.046741988509893417, } };
const TfArray<1, int> quant61_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.064266562461853027, } };
const TfArray<1, int> quant62_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.02190299890935421, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.043147344142198563, } };
const TfArray<1, int> quant65_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.075189657509326935, } };
const TfArray<1, int> quant66_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.021517014130949974, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.024059994146227837, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.07277708500623703, } };
const TfArray<1, int> quant69_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
